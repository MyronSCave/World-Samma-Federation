{"version":3,"file":"static/js/713.51518dce.chunk.js","mappings":"iaAqBA,MA2IA,EA3IiBA,KACf,MAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,IAAYC,EAAAA,EAAAA,MAC7BC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAC1CC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IACjC,KAAEG,IAASC,EAAAA,EAAAA,KACXC,GAAWC,EAAAA,EAAAA,MAEXC,GAAoBC,EAAAA,EAAAA,cAAYC,UACpC,GAAKN,EAIL,IACE,MAAMO,EAAS,CACbC,QAAS,CACPC,cAAc,UAADC,OAAYV,EAAKW,UAI5B,KAAEC,SAAeC,EAAAA,EAAMC,IAAI,+BAADJ,OACCV,EAAKe,KACpCR,GAEFX,EAAgBgB,EAClB,CAAE,MAAOI,GACPC,QAAQD,MAAM,gCAAiCA,EACjD,IACC,CAAChB,KAEJkB,EAAAA,EAAAA,YAAU,KACJlB,GACFI,GACF,GACC,CAACJ,EAAMI,IAyBV,OACEe,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAACG,EAAAA,EAAM,CACLC,gBAAiB,QACjBC,OAAQ,CAAED,gBAAiB,eAC3BE,QAASjC,EAAO6B,SAAA,EAEhBK,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CACJC,IAAI,2FACJC,OAAQ,IAETlC,GAAgBA,EAAamC,OAAS,IACrCJ,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CACHC,SAAS,WACTC,OAAO,MACPC,MAAM,MACNC,UAAU,oBACVC,GAAG,UACHC,aAAa,MACbC,MAAM,MACNT,OAAO,MACPU,EAAG,OAGPb,EAAAA,EAAAA,KAACK,EAAAA,EAAI,QAGPZ,EAAAA,EAAAA,MAACqB,EAAAA,GAAK,CAACjD,OAAQA,EAAQE,QAASA,EAAQ4B,SAAA,EACxCK,EAAAA,EAAAA,KAACe,EAAAA,EAAY,CACbL,GAAG,iBACHM,eAAe,kCAEbvB,EAAAA,EAAAA,MAACwB,EAAAA,EAAY,CAAAtB,SAAA,EACXK,EAAAA,EAAAA,KAACkB,EAAAA,EAAW,CAACC,UAAW,SAASxB,SAAC,oBAClCK,EAAAA,EAAAA,KAACoB,EAAAA,EAAgB,KACjBpB,EAAAA,EAAAA,KAACqB,EAAAA,EAAS,CACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,QAAS,SACTC,KAAM,QAAQ/B,SAEb1B,GAAgBA,EAAamC,OAAS,EACrCnC,EAAa0D,KAAI,CAACC,EAAMC,KACtBpC,EAAAA,EAAAA,MAACqC,EAAAA,GAAG,CACFR,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZZ,MAAO,OAAOjB,SAAA,EAGdF,EAAAA,EAAAA,MAACG,EAAAA,EAAM,CAEL2B,eAAgB,gBAChBxB,QAASA,IAAMvB,EAAS,aAADQ,OAAc4C,EAAKvC,MAAOM,SAAA,CAEhDkC,EAAQ,EAAE,gBAAcD,EAAKG,OAJzBH,EAAKvC,MAMZW,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACLoC,WAAY,UACZjC,QAASA,IAnFJnB,WACrB,GAAKN,GAAS2D,EAAd,CAGA5D,GAAW,GACX,IACE,MAAMQ,EAAS,CACbC,QAAS,CACPC,cAAc,UAADC,OAAYV,EAAKW,UAI5B,KAAEC,SAAeC,EAAAA,EAAMC,IAAI,8BAADJ,OACAiD,EAAM,KAAAjD,OAAIV,EAAKe,KAC7CR,GAEFX,EAAgBgB,GAChBb,GAAW,EACb,CAAE,MAAOiB,GACPjB,GAAW,GACXkB,QAAQD,MAAM,wCAAyCA,EACzD,CAlBA,CAkBA,EA8D+B4C,CAAeN,EAAKvC,KAAKM,SAEvCvB,GAAU4B,EAAAA,EAAAA,KAACmC,EAAAA,EAAO,CAACC,KAAM,UAAW,cAblCP,MAkBT7B,EAAAA,EAAAA,KAAAN,EAAAA,SAAA,CAAAC,UACEK,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAAAV,SAAC,iDAKZK,EAAAA,EAAAA,KAACqC,EAAAA,EAAW,CAACC,SAAU,QAASC,UAAW,YAAY5C,SAAC,sDAK3D,EC+GP,QAnPA,WACE,MAAM,KAAErB,EAAI,aAAEkE,EAAY,gBAAEC,IAAoBlE,EAAAA,EAAAA,MAC1C,OAAEV,EAAM,OAAEC,EAAM,QAAEC,IAAYC,EAAAA,EAAAA,KAC9BQ,GAAWC,EAAAA,EAAAA,MAQXiE,GAAeC,EAAAA,EAAAA,GAAmB,CAAEC,KAAM,OAAQC,GAAI,SAEtDC,GAAiBH,EAAAA,EAAAA,GAAmB,CACxCC,KAAM,SACNC,GAAI,YAGN,OACEpD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAACqC,EAAAA,GAAG,CACFR,QAAS,OACTC,eAAe,gBACfC,WAAW,SACXd,GAAG,QACHqC,EAAE,OACFlC,EAAG,EACHmC,cAAe,EACfC,UAAU,MACVC,OAAQ,GACRC,IAAK,EACL7C,SAAU,QAAQX,SAAA,EAElBK,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CACHc,UAAW,SACXmB,SAAU,CAAEM,KAAM,QAASC,GAAI,UAC/BO,WAAY,OACZC,WAAY,OACZxC,EAAG,EACHyC,EAAG,EACHC,GAAI,EAAE5D,SACP,gBAGDF,EAAAA,EAAAA,MAACqC,EAAAA,GAAG,CAACR,QAAS,OAAQC,eAAgB,SAAUC,WAAY,SAAS7B,SAAA,EACnEK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACLC,gBAAiB,cACjByB,QAASoB,EACTc,WAAYV,EACZhD,OAAQ,CAAED,gBAAiB,cAAe4D,MAAO,aACjD1D,QAASA,KACPvB,EAAS,aAAa,EACtBmB,SACH,iBAGDK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACL8D,QAAQ,QACR3D,QAASjC,EACTgC,OAAQ,CAAED,gBAAiB,cAAe4D,MAAO,aAAc9D,UAE/DK,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CACHiB,QAAS,CAAEsB,KAAM,OAAQC,GAAI,QAC7Bc,GAAI,EACJN,WAAY,OAAO1D,SACpB,gBAIHK,EAAAA,EAAAA,KAACpC,EAAQ,QAGX6B,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEF,EAAAA,EAAAA,MAACmE,EAAAA,EAAI,CAAAjE,SAAA,EACHF,EAAAA,EAAAA,MAACoE,EAAAA,EAAU,CAAChD,EAAG,EAAGP,SAAS,WAAUX,SAAA,EACnCK,EAAAA,EAAAA,KAAC8D,EAAAA,EAAQ,CAACxB,SAAS,MAAMzB,EAAG,EAAGyC,EAAG,IACjCd,EAAapC,OAAS,IACrBJ,EAAAA,EAAAA,KAAC+D,EAAAA,EAAK,CACJL,QAAQ,SACRpD,SAAS,WACT6C,IAAI,OACJ3C,MAAM,OACNX,gBAAiB,MACjBqD,OAAQ,EACRvC,aAAc,MACd8C,MAAM,QAAO9D,SAEZ6C,EAAapC,aAIpBX,EAAAA,EAAAA,MAACuE,EAAAA,EAAQ,CAACT,GAAI,EAAE5D,SAAA,EACZ6C,EAAapC,QAAU,kBACxBoC,EAAab,KAAKsC,IACjBjE,EAAAA,EAAAA,KAACkE,EAAAA,EAAQ,CAEPnE,QAASA,KACP0C,EAAgBD,EAAa2B,QAAQC,GAAMA,IAAMH,IAAO,EACxDtE,SAAA,oBAAAX,OAGAiF,EAAMI,OAASJ,EAAMI,OAAOtC,KAAO,QAAO,UAAA/C,OACnCiF,EAAMI,OAASJ,EAAMI,OAAOC,UAAY,MAP5CL,EAAM5E,cAYnBW,EAAAA,EAAAA,KAAC4D,EAAAA,EAAI,CAAAjE,UACHK,EAAAA,EAAAA,KAAC6D,EAAAA,EAAU,CACTU,GAAI3E,EAAAA,EACJc,GAAG,QACHZ,OAAQ,CAAED,gBAAiB,eAC3BE,QAASjC,EAAO6B,SAEE,SAAjB+C,GACC1C,EAAAA,EAAAA,KAACwE,EAAAA,EAAM,CACLpC,KAAK,KACLqC,OAAO,UACP1C,KAAU,OAAJzD,QAAI,IAAJA,OAAI,EAAJA,EAAMyD,KACZ7B,IAAS,OAAJ5B,QAAI,IAAJA,OAAI,EAAJA,EAAMoG,OAGb1E,EAAAA,EAAAA,KAAC2E,EAAAA,EAAU,CACT9E,gBAAiB,cACjB+E,MACE5E,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CACJC,IAAI,0FACJC,OAAQ,iBAUxBV,EAAAA,EAAAA,MAACoF,EAAAA,EAAM,CAACC,UAAU,OAAO/G,QAASA,EAASF,OAAQA,EAAO8B,SAAA,EAC1DK,EAAAA,EAAAA,KAAC+E,EAAAA,EAAa,CACdrE,GAAG,iBACHM,eAAe,kCAEbvB,EAAAA,EAAAA,MAACuF,EAAAA,EAAa,CAAArF,SAAA,EACZF,EAAAA,EAAAA,MAACwF,EAAAA,EAAY,CACXC,kBAAkB,MAClB5D,QAAS,OACTC,eAAgB,gBAAgB5B,SAAA,CACjC,aAECK,EAAAA,EAAAA,KAACmF,EAAAA,EAAW,CAACpF,QAAShC,QAExB0B,EAAAA,EAAAA,MAAC2F,EAAAA,EAAU,CACT9D,QAAS,OACTG,QAAS,SACTF,eAAgB,gBAChBX,MAAO,OAAOjB,SAAA,EAEdF,EAAAA,EAAAA,MAACqC,EAAAA,GAAG,CACFuD,QAAS,EACT/D,QAAS,OACTC,eAAgB,eAChBE,QAAS,SAAS9B,SAAA,EAElBF,EAAAA,EAAAA,MAACG,EAAAA,EAAM,CACL0B,QAAS,OACTC,eAAgB,OAChBC,WAAY,SACZQ,WAAY,QACZsB,EAAG,EACHxD,OAAQ,CAAED,gBAAiB,cAAe4D,MAAO,SACjD1D,QAASA,IAAMvB,EAAS,YAAYmB,SAAA,EAEpCK,EAAAA,EAAAA,KAACwE,EAAAA,EAAM,CACLpC,KAAK,KACLqC,OAAO,UACP1C,KAAU,OAAJzD,QAAI,IAAJA,OAAI,EAAJA,EAAMyD,KACZ7B,IAAS,OAAJ5B,QAAI,IAAJA,OAAI,EAAJA,EAAMoG,OAEb1E,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAACQ,EAAG,EAAGyC,EAAG,EAAE3D,SAAC,gBAIpBK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACL2B,eAAgB,OAChBS,WAAY,QACZlC,OAAQ,CAAED,gBAAiB,cAAe4D,MAAO,SACjD1D,QAASA,KACPvB,EAAS,cACTT,GAAS,EACT4B,SACH,iBAGDK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACL2B,eAAgB,QAChBS,WAAY,QACZlC,OAAQ,CAAED,gBAAiB,cAAe4D,MAAO,SACjD1D,QAASA,KACPvB,EAAS,UACTT,GAAS,EACT4B,SACH,WAGDK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACL2B,eAAgB,OAChBS,WAAY,QACZlC,OAAQ,CAAED,gBAAiB,cAAe4D,MAAO,SACjD6B,aAAiB,OAAJhH,QAAI,IAAJA,GAAAA,EAAMiH,WACnBxF,QAASA,KACPvB,EAAS,aACTT,GAAS,EACT4B,SACH,sBAGDK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACLoC,WAAY,QACZT,eAAgB,OAChBzB,OAAQ,CAAED,gBAAiB,cAAe4D,MAAO,SACjD1D,QAASA,KACPvB,EAAS,aACTT,GAAS,EACT4B,SACH,oBAGDK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACLoC,WAAY,QACZT,eAAgB,OAChBzB,OAAQ,CAAED,gBAAiB,cAAe4D,MAAO,SAAU9D,SAC5D,mCAIHK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CAACG,QAtOIyF,KACpBC,aAAaC,WAAW,YACxBjD,EAAgB,IAChBjE,EAAS,IAAI,EAmO0BmB,SAAC,uBAM5C,C,sJCpQA,MA2IA,EA3IsBgG,IAAwB,IAAvB,QAAEC,EAAO,KAAEtH,GAAMqH,EACtC,MAAM,GAAEE,IAAOC,EAAAA,EAAAA,KACTC,EAAWC,SAASH,EAAI,IACxBI,EAASL,EAAQM,MAAMD,GAAWA,EAAOJ,KAAOE,KAC/CI,EAAoBC,IAAyBjI,EAAAA,EAAAA,UAAS,IACtDkI,EAAgBC,IAAqBnI,EAAAA,EAAAA,UAAS,KAC9CC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,GACjCK,GAAWC,EAAAA,EAAAA,MACX8H,GAAQC,EAAAA,EAAAA,KAWRC,EAAgBR,EAAOS,QAAQP,GAoDrC,OACE1G,EAAAA,EAAAA,MAACqC,EAAAA,GAAG,CAACjC,gBAAiB,QAASe,MAAO,OAAOjB,SAAA,EAC3CK,EAAAA,EAAAA,KAAC2G,EAAAA,EAAQ,KACT3G,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAACiC,SAAS,OAAOc,WAAW,OAAOwD,GAAI,EAAGC,GAAI,GAAGlH,SACnDsG,EAAOa,SAEVrH,EAAAA,EAAAA,MAACqC,EAAAA,GAAG,CACFR,QAAS,OACTG,QAAS,SACTF,eAAgB,SAChBC,WAAY,SACZQ,WAAY,QAAQrC,SAAA,EAEpBF,EAAAA,EAAAA,MAACqC,EAAAA,GAAG,CAAC8E,GAAI,EAAEjH,SAAA,EACTF,EAAAA,EAAAA,MAACY,EAAAA,EAAI,CAACiC,SAAS,QAAQc,WAAW,SAAQzD,SAAA,CACvC8G,EAAcK,MAAM,IAAEb,EAAOS,QAAQtG,QACtCX,EAAAA,EAAAA,MAACY,EAAAA,EAAI,CAACiC,SAAU,QAAQ3C,SAAA,CACrB,IAAI,sDAITK,EAAAA,EAAAA,KAAA,UACE8G,MAAK,UAAA9H,OAAYyH,EAAcZ,IAC/BjF,MAAM,OACNT,OAAO,MACPD,IAAKuG,EAAcM,MACnBC,iBAAe,EACfC,MAAO,CAAEC,SAAU,QAASC,OAAQ,aAEtC1H,EAAAA,EAAAA,MAACY,EAAAA,EAAI,CAACwG,GAAI,EAAG1F,UAAW,SAAUN,EAAG,EAAGD,MAAO,OAAOjB,SAAA,EACpDF,EAAAA,EAAAA,MAACG,EAAAA,EAAM,CACLoC,WAAW,cACXlC,OAAQ,CAAED,gBAAiB,cAAe4D,MAAO,SACjDA,MAAO,SACP1D,QAASA,IA5ECnB,WACpB,GAAKN,GAAS8I,EAEd,IACE,MAAMvI,EAAS,CACbC,QAAS,CACPC,cAAc,UAADC,OAAYV,EAAKW,SAIlCZ,GAAW,GAEX,MAAM,KAAEa,SAAeC,EAAAA,EAAMC,IAAI,uBAADJ,OACPoI,EAAI,YAAApI,OAAWV,EAAK+I,UAC3CxI,GAGFyH,EAAkBpH,GAElBb,GAAW,EACb,CAAE,MAAOiB,GACPjB,GAAW,GACXkI,EAAM,CACJO,MAAO,iBACPQ,YAAahI,EAAMiI,SAASrI,KAAKsI,QACjCC,OAAQ,QACRC,SAAU,IACVC,YAAY,EACZrH,SAAU,UAEd,GA8CyBsH,CAAcnB,EAAcoB,OAC3CC,eAAgB,YAAYnI,SAAA,CAC7B,YACWvB,IAAW4B,EAAAA,EAAAA,KAACmC,EAAAA,EAAO,CAACC,KAAM,UAErCiE,GAAkCI,EAAcoB,aAGrDpI,EAAAA,EAAAA,MAACqC,EAAAA,GAAG,CACFR,QAAQ,OACRE,WAAY,SACZD,eAAe,eACfX,MAAO,OAAOjB,SAAA,EAEdK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACLG,QAnGiBgI,KACzBzB,EAAkB,IAEdH,EAAqB,GACvBC,GAAuB4B,GAAcA,EAAY,GACnD,EA+FQC,SAAiC,IAAvB9B,EACVxF,aAAc,GAAGhB,SAClB,qBAGDK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACLG,QArHamI,KACrB5B,EAAkB,IACdH,EAAqBF,EAAOS,QAAQtG,OAAS,GAC/CgG,GAAuB4B,GAAcA,EAAY,IAE/C7B,EAAqB,IAAMF,EAAOS,QAAQtG,QAC5C5B,EAAS,YAADQ,OAAa6G,EAAE,YAAA7G,OAAWiH,EAAOa,OAC3C,EA+GQmB,SAAU9B,IAAuBF,EAAOS,QAAQtG,OAAS,EACzDO,aAAc,GAAGhB,SAClB,wBAKD,C,iDC1IIwI,EAAsBC,IAAmBC,EAAAA,EAAAA,GAErD,CACAtG,KAAA,sBACAuG,SAAA,kBACAC,aAAc,c,mBCJT,SAASC,EAASzG,GAJzB,IAAA0G,EAKE,MAAMC,EAAQ3G,EAAK4G,MAAM,KACnBC,EAAY,OAAAH,EAAAC,EAAM,IAAND,EAAY,GACxBI,EAAWH,EAAMtI,OAAS,EAAIsI,EAAMA,EAAMtI,OAAS,GAAK,GAC9D,OAAOwI,GAAaC,EAAA,GAAA7J,OACb4J,EAAUE,OAAO,IAAC9J,OAAI6J,EAASC,OAAO,IACzCF,EAAUE,OAAO,EACvB,CASO,SAASC,EAAWC,GACzB,MAAM,KAAEjH,EAAA,YAAMkH,KAAgBC,GAASF,EACjCG,EAASf,IAEf,OACEgB,EAAAA,EAAAA,KAACC,EAAAA,EAAOC,IAAP,CAAWC,KAAK,MAAM,aAAYxH,KAAUmH,EAAMM,MAAOL,EAAOM,MAC9D9J,SAAAoC,EAAO,MAAAkH,OAAA,EAAAA,EAAclH,GAAQ,MAGpC,CAEAgH,EAAWW,YAAc,aCzBlB,IAAMC,EAA6CX,IACxDY,EAAAA,EAAAA,MAACP,EAAAA,EAAOQ,IAAP,CACCC,QAAQ,cACRrG,MAAM,OACN7C,MAAM,OACNT,OAAO,OACP4J,UAAU,wBACNf,EAEJrJ,SAAA,EAAAyJ,EAAAA,EAAAA,KAAC,QACCY,KAAK,eACLC,EAAE,mMAEJb,EAAAA,EAAAA,KAAC,QACCY,KAAK,eACLC,EAAE,kM,oBCPD,SAASC,EAAYlB,GAC1B,MAAM,IACJ9I,EAAA,OACAiK,EAAA,QACAC,EAAA,OACAC,EAAA,YACApB,EAAA,KACAlH,EAAA,aACApB,EAAA,QACAvC,EAAA,UACAkM,EAAA1F,KACAA,GAAOwE,EAAAA,EAAAA,KAACO,EAAA,IAAkB,eAC1BY,EAAA,eACAC,EAAA,YACAC,GACEzB,EAKEvB,GAASiD,EAAAA,EAAAA,GAAS,CAAExK,MAAKkK,UAASK,cAAaF,mBAarD,OAFsBrK,KATO,WAAXuH,GAYT1F,GACLqH,EAAAA,EAAAA,KAACL,EAAA,CACCgB,UAAU,0BACVd,cACAlH,UAGF4I,EAAAA,EAAAA,cAAa/F,EAAM,CACjB2E,KAAM,MACN,aAAce,KASlBlB,EAAAA,EAAAA,KAACC,EAAAA,EAAOuB,IAAP,CACC1K,MACAiK,SACAU,IAAK9I,EACLsI,SACAG,iBACAC,YAAa,MAAAA,EAAAA,OAAe,EAC5BV,UAAU,qBACV3L,UACAoL,MAAO,CACL5I,MAAO,OACPT,OAAQ,OACR2K,UAAW,QACXnK,iBAIR,CAEAuJ,EAAYR,YAAc,c,4CCpEbqB,EAA+B,CAC1CzJ,QAAS,cACTE,WAAY,SACZD,eAAgB,SAChBJ,UAAW,SACX6J,cAAe,YACf5H,WAAY,SACZ9C,SAAU,WACV2K,WAAY,GAsBDzG,GAAS0G,EAAAA,EAAAA,IAAgC,CAAClC,EAAOmC,KAC5D,MAAMhC,GAASiC,EAAAA,EAAAA,IAAoB,SAAUpC,IACtCqC,EAAUC,IAAenN,EAAAA,EAAAA,WAAS,IAEnC,IACJ+B,EAAA,OACAiK,EAAA,KACApI,EAAA,WACAwJ,EAAA,aACA5K,EAAe,OAAM,QACrByJ,EACAC,OAAQmB,EAAA,YACRvC,EAAcT,EAAA,KACd5D,GAAOwE,EAAAA,EAAAA,KAACO,EAAA,IAAkB,UAC1BW,EAAY,UAAS,QACrBlM,EAAA,SACAuB,EAAA,YACA8L,EAAA,eACAlB,EAAA,YACAE,EAAA,eACAD,KACGtB,IACDwC,EAAAA,EAAAA,IAAiB1C,GAEf2C,EAAkC,CACtChL,eACAiL,YAAaL,EAAa,WAAQ,KAC/BR,KACA5B,EAAO0C,WAOZ,OAJIJ,IACFE,EAAaF,YAAcA,IAI3BrC,EAAAA,EAAAA,KAACC,EAAAA,EAAOyC,KAAP,CACCX,SACIjC,EACJa,WAAWgC,EAAAA,EAAAA,IAAG,gBAAiB/C,EAAMe,WACrC,eAAaiC,EAAAA,EAAAA,IAASX,GACtB7B,MAAOmC,EAEPhM,UAAAiK,EAAAA,EAAAA,MAACzB,EAAA,CAAqB8D,MAAO9C,EAC3BxJ,SAAA,EAAAyJ,EAAAA,EAAAA,KAACc,EAAA,CACChK,MACAiK,SACA/L,UACAiM,QAAQ6B,EAAAA,EAAAA,IAAgBV,GAAY,KAClCF,GAAY,EAAK,IAEnBlB,UACAnB,cACAlH,OACApB,eACAiE,OACA0F,YACAC,iBACAE,cACAD,mBAED7K,MAEL,IAIJ6E,EAAOkF,YAAc,Q,6EChHd,IAAM5F,EC2BN,SAAoBqI,GACzB,MAAM,QACJrC,EAAU,YACVG,EAAGmC,EAAA,YACH1C,EAAA,aACA2C,EAAe,CAAC,GACdF,EACEG,EAAOC,EAAAA,SAASC,QAAQL,EAAQG,MAEhCG,GAAOvB,EAAAA,EAAAA,IAA6B,CAAClC,EAAOmC,KAChD/B,EAAAA,EAAAA,KAACsD,EAAAA,EAAA,CAAKvB,MAAUrB,aAAsBuC,KAAkBrD,EACrDrJ,SAAA2M,EAAKlM,OAASkM,GAAOlD,EAAAA,EAAAA,KAAC,QAAKY,KAAK,eAAeC,EAAGmC,QAMvD,OAFAK,EAAK/C,YAAcA,EAEZ+C,CACT,CD7CwBE,CAAW,CACjCjD,YAAa,WACbO,EAAG,oK,iGEgBQlG,GAAQmH,EAAAA,EAAAA,IAA+B,SAAelC,EAAOmC,GACxE,MAAMhC,GAASyD,EAAAA,EAAAA,IAAe,QAAS5D,IACjC,UAAEe,KAAcb,IAASwC,EAAAA,EAAAA,IAAiB1C,GAEhD,OACEI,EAAAA,EAAAA,KAACC,EAAAA,EAAOyC,KAAP,CACCX,MACApB,WAAWgC,EAAAA,EAAAA,IAAG,eAAgB/C,EAAMe,cAChCb,EACJM,MAAO,CACLlI,QAAS,eACTuL,WAAY,SACZC,cAAe,YACZ3D,IAIX,IAEApF,EAAM2F,YAAc,O,gGCxBb,SAASqD,EAAcC,GAf9B,IAAAvE,EAAAwE,EAgBE,MAAMC,GAAOC,EAAAA,EAAAA,IAASH,GAAOA,EAAM,CAAEI,SAAU,MAAAJ,EAAAA,EAAO,QAGhDK,GAFQC,EAAAA,EAAAA,KAEYC,cAAeC,QAAQ7L,KAC/CgE,IAAA,IAAC,YAAE8H,EAAA,WAAaC,GAAW/H,EAAA,MAAO,CAChC+H,aACAC,MAAOF,EAAYG,QAAQ,qBAAsB,IAClD,IAGGR,EAAWC,EAAY1L,KAAKkM,GAAOA,EAAGH,aAAeR,EAAKE,WAC1DU,ECXD,SACLH,GAEW,IADXxB,EAAA4B,UAAA3N,OAAA,QAAA4N,IAAAD,UAAA,GAAAA,UAAA,GAAgC,CAAC,EAEjC,MAAM,IAAEE,GAAM,EAAI,SAAEb,GAAajB,GAE3B,UAAE+B,IAAcC,EAAAA,EAAAA,KAEhBC,EAAUC,MAAMC,QAAQX,GAASA,EAAQ,CAACA,GAEhD,IAAIY,EAAiBF,MAAMC,QAAQlB,GAAYA,EAAW,CAACA,GAC3DmB,EAAiBA,EAAepK,QAAQqK,GAAW,MAALA,IAE9C,MAAOvC,EAAOwC,IAAYtQ,EAAAA,EAAAA,WAAS,IAC1BiQ,EAAQzM,KAAI,CAAC+M,EAAO7M,KAAA,CACzB8M,MAAOD,EACPE,QAASX,IACHM,EAAe1M,GACjBqM,IAAYW,WAAWH,GAAOE,cA4CtC,OAxCApP,EAAAA,EAAAA,YAAU,KACR,MAAMsP,EAAMZ,IACZO,EACEL,EAAQzM,KAAK+M,IAAA,CACXC,MAAOD,EACPE,QAASE,EAAID,WAAWH,GAAOE,aAInC,MAAMG,EAAMX,EAAQzM,KAAK+M,GAAUI,EAAID,WAAWH,KAE5CM,EAAWC,IACfR,GAAUS,GACDA,EAAKC,QAAQxN,KAAKyN,GACnBA,EAAKT,QAAUM,EAAIN,MAAc,IAAKS,EAAMR,QAASK,EAAIL,SACtDQ,KAET,EAWJ,OARAL,EAAIM,SAASC,IACoB,oBAApBA,EAAIC,YACbD,EAAIC,YAAYP,GAEhBM,EAAIE,iBAAiB,SAAUR,EACjC,IAGK,KACLD,EAAIM,SAASC,IACuB,oBAAvBA,EAAIG,eACbH,EAAIG,eAAeT,GAEnBM,EAAII,oBAAoB,SAAUV,EACpC,GACA,CACH,GAEA,CAACd,IAEGjC,EAAMtK,KAAKyN,GAASA,EAAKR,SAClC,CDpDiBe,CACbtC,EAAY1L,KAAKkM,GAAOA,EAAGF,QAC3B,CAAEP,WAAUa,IAAKf,EAAKe,MAIxB,OAAO,OAAAhB,EAAA,OAAAxE,EAAA4E,EADOS,EAAO8B,WAAW3D,GAAmB,GAATA,WACnC,EAAAxD,EAAoBiF,YAApBT,EAAkCC,EAAKE,QAChD,CEhBO,SAASzK,EACdmL,EACAd,GApBF,IAAAvE,EAsBE,MACMiF,EAAaX,GADNI,EAAAA,EAAAA,IAASH,GAAOA,EAAM,CAAEI,SAAU,MAAAJ,EAAAA,EAAO,SAEhD6C,GAAQvC,EAAAA,EAAAA,KAEd,IAAKI,EAAY,OAKjB,MAAML,EAAcgB,MAAMyB,MAAK,OAAArH,EAAAoH,EAAMtC,oBAAN,EAAA9E,EAAqBsH,OAAQ,IAU5D,OCvCK,SACLjC,EACAJ,GAEA,IADAL,EAAAU,UAAA3N,OAAA,QAAA4N,IAAAD,UAAA,GAAAA,UAAA,GAAciC,EAAAA,GAEVnO,EAAQoO,OAAOF,KAAKjC,GAAQoC,QAAQxC,GAExC,IAAe,IAAX7L,EACF,OAAOiM,EAAOJ,GAGhB,IAAIyC,EAAY9C,EAAY6C,QAAQxC,GAEpC,KAAOyC,GAAa,GAAG,CACrB,MAAMC,EAAM/C,EAAY8C,GAExB,GAAIrC,EAAOuC,eAAeD,GAAM,CAC9BvO,EAAQsO,EACR,KACF,CACAA,GAAa,CACf,CAEA,IAAe,IAAXtO,EAEF,OAAOiM,EADKT,EAAYxL,GAK5B,CDUSyO,CARKjC,MAAMC,QAAQR,GACtBmC,OAAOM,YACLN,OAAOO,SAAQC,EAAAA,EAAAA,IAAsB3C,EAAQT,IAAc1L,KACzDgE,IAAA,IAAEyK,EAAKnE,GAAKtG,EAAA,MAAM,CAACyK,EAAKnE,EAAM,KAGlC6B,EAEwBJ,EAAYL,EAC1C,C,mJEtBMqD,EAAoB,CACxBC,KAAM,CACJjJ,SAAU,IACVkJ,KAAMC,EAAAA,GAAmBC,WAE3BC,MAAO,CACLC,KAAM,SACNC,QAAS,GACTC,UAAW,MAITC,EAAmC,CACvCR,KAAMhL,IAAqD,IAApD,UAAEyL,EAAA,WAAWC,EAAA,cAAYC,EAAA,MAAeC,GAAM5L,EAjCvD,IAAA8C,EAkCI,MAAQkI,KAAMa,IAAeC,EAAAA,EAAAA,IAAmB,CAAEL,cAClD,MAAO,IACFI,EACHH,WACE,OAAA5I,EAAA,MAAA4I,OAAA,EAAAA,EAAYV,MAAZlI,EAAoBiJ,EAAAA,GAAUf,KAAKD,EAAkBC,KAAMY,GAC7DD,cAAe,MAAAA,OAAA,EAAAA,EAAeX,KAC/B,EAEHI,MAAOY,IAAqD,IAApD,UAAEP,EAAA,cAAWE,EAAAD,WAAeA,EAAA,MAAYE,GAAMI,EA1CxD,IAAAlJ,EA2CI,MAAQsI,MAAOa,IAAgBH,EAAAA,EAAAA,IAAmB,CAAEL,cACpD,MAAO,IACFQ,EACHP,WACE,OAAA5I,EAAA,MAAA4I,OAAA,EAAAA,EAAYN,OAAZtI,EAAqBiJ,EAAAA,GAAUX,MAAML,EAAkBK,MAAOQ,GAChED,cAAe,MAAAA,OAAA,EAAAA,EAAeP,MAC/B,GAkBQc,GAAQ3G,EAAAA,EAAAA,aAAuC,SAC1DlC,EACAmC,GAEA,MAAM,UACJiG,EAAY,QAAO,MACnBnK,EAAA,cACA6K,EACAC,GAAIlU,EAAA,UACJkM,EAAA,WACAsH,EAAA,cACAC,EAAA,MACAC,EAAA,YACAS,KACG9I,GACDF,EAEEiJ,GAAmBR,EAAAA,EAAAA,IAAmB,CAAEL,cACxCc,EAA6BjC,OAAOkC,OACxC,CAAE7R,SAAU,SACZ2R,EAAiB3R,SACjB2G,GAGImL,GAAON,GAAgBjU,GAAUiU,EACjCO,EAAUxU,GAAUiU,EAAgB,QAAU,OAE9CQ,EAAS,CAAEhB,gBAAeD,aAAYD,YAAWG,SAEvD,OACEnI,EAAAA,EAAAA,KAACmJ,EAAAA,EAAA,CAAgBD,SACd3S,SAAAyS,IACChJ,EAAAA,EAAAA,KAACoJ,EAAAA,EAAOlJ,IAAP,IACKJ,EACJiC,MACAsH,QAAQ,OACR1I,WAAWgC,EAAAA,EAAAA,IAAG,eAAgBhC,GAC9BsI,UACA1B,KAAK,OACL2B,SACAnB,WACAlK,MAAOiL,KACHF,KAKd,IAEAH,EAAMnI,YAAc,QCtGpB,IAAMgJ,GAAYrJ,EAAAA,EAAAA,GAAOwI,GAiBZ7M,GAAgBkG,EAAAA,EAAAA,IAC3B,CAAClC,EAAOmC,KACN,MAAM,UACJpB,EAAA,SACApK,EAAA,YACAqS,EACAW,eAAgBC,KACb1J,GACDF,GAEE,eAAE6J,EAAA,wBAAgBC,EAAA,OAAyBjV,IAC/CkV,EAAAA,EAAAA,MAEIC,EAAcH,EAAe3J,EAAMiC,GACnCwH,EAAiBG,EAAwBF,GAEzCK,GAAalH,EAAAA,EAAAA,IAAG,wBAAyBhC,GAEzCZ,GAAS+J,EAAAA,EAAAA,MAETC,EAAkC,CACtC7R,QAAS,OACT8R,cAAe,SACf9S,SAAU,WACVM,MAAO,OACPyS,QAAS,KACNlK,EAAOmK,QAGNC,EAA2C,CAC/CjS,QAAS,OACTV,MAAO,QACPT,OAAQ,SACRG,SAAU,QACVkT,KAAM,EACNrQ,IAAK,KACFgG,EAAOsK,kBAGN,UAAE3O,IAAc4O,EAAAA,EAAAA,KAEtB,OACEtK,EAAAA,EAAAA,KAACuK,EAAAA,EAAA,CACChU,UAAAyJ,EAAAA,EAAAA,KAACC,EAAAA,EAAOC,IAAP,IACKqJ,EACJ5I,UAAU,kCACVP,MAAO+J,EAEP5T,UAAAyJ,EAAAA,EAAAA,KAACsJ,EAAA,CACCV,cACAZ,UAAWtM,EACXiN,GAAIlU,EACJkM,UAAWkJ,KACPD,EACJxJ,MAAO2J,EAENxT,gBAGP,IAKNqF,EAAc0E,YAAc,e,sFC1FrBkK,EAAuBF,IAAoBrL,EAAAA,EAAAA,KAS5CwL,EAAoC,CACxCC,MAAO,CAAEC,IAAK,OAAQC,IAAK,SAC3BC,IAAK,CAAEF,IAAK,QAASC,IAAK,SAuCrB,SAASnP,EAAOmE,GAvDvB,IAAAP,EAwDE,MAAM,OACJ5K,EAAA,QACAE,EACA+G,UAAWoP,EAAgB,QAAO,SAClCvU,KACGuJ,GACDF,EAEE6G,GAAQvC,EAAAA,EAAAA,KACR6G,EAAoB,OAAA1L,EAAAoH,EAAMuE,iBAAN,EAAA3L,EAAkB5D,OACtCC,EA/CR,SACEA,EACAuP,GArBF,IAAA5L,EAAAwE,EAuBE,GAAKnI,EAEL,OAAO,OAAAmI,EAAA,OAAAxE,EAAAoL,EAAa/O,SAAb,EAAA2D,EAA0B4L,IAA1BpH,EAAkCnI,CAC3C,CAwCoBwP,CAAmBJ,EAAerE,EAAMuB,WAE1D,OACEhI,EAAAA,EAAAA,KAACwK,EAAA,CAAsB3H,MAAO,CAAEnH,aAC9BnF,UAAAyJ,EAAAA,EAAAA,KAACtI,EAAAA,GAAA,CACCjD,SACAE,UACAwW,YAAaJ,KACTjL,EAEHvJ,cAIT,C","sources":["miscellenious/Requests.js","miscellenious/upperNav.js","pages/Courses.js","../node_modules/@chakra-ui/avatar/src/avatar-context.tsx","../node_modules/@chakra-ui/avatar/src/avatar-name.tsx","../node_modules/@chakra-ui/avatar/src/generic-avatar-icon.tsx","../node_modules/@chakra-ui/avatar/src/avatar-image.tsx","../node_modules/@chakra-ui/avatar/src/avatar.tsx","../node_modules/@chakra-ui/icons/src/Bell.tsx","../node_modules/@chakra-ui/icon/src/create-icon.tsx","../node_modules/@chakra-ui/layout/src/badge.tsx","../node_modules/@chakra-ui/media-query/src/use-breakpoint.ts","../node_modules/@chakra-ui/media-query/src/use-media-query.ts","../node_modules/@chakra-ui/media-query/src/use-breakpoint-value.ts","../node_modules/@chakra-ui/media-query/src/media-query.utils.ts","../node_modules/@chakra-ui/transition/src/slide.tsx","../node_modules/@chakra-ui/modal/src/drawer-content.tsx","../node_modules/@chakra-ui/modal/src/drawer.tsx"],"sourcesContent":["import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure,\n  Button,\n  Image,\n  Text,\n  Flex,\n  Box,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport { ChatState } from \"../components/Context/ChatProvider\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Requests = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [clubRequests, setClubRequests] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { user } = ChatState();\n  const navigate = useNavigate();\n\n  const fetchClubRequests = useCallback(async () => {\n    if (!user) {\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\n        `/api/clubs/github/something/${user._id}`,\n        config\n      );\n      setClubRequests(data);\n    } catch (error) {\n      console.error(\"Error fetching club requests:\", error);\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (user) {\n      fetchClubRequests();\n    }\n  }, [user, fetchClubRequests]);\n\n  const declineRequest = async (clubId) => {\n    if (!user || !clubId) {\n      return;\n    }\n    setLoading(true);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\n        `/api/clubs/decline/request/${clubId}/${user._id}`,\n        config\n      );\n      setClubRequests(data);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      console.error(\"Error fetching club requests/decline:\", error);\n    }\n  };\n  return (\n    <>\n      <Button\n        backgroundColor={\"white\"}\n        _hover={{ backgroundColor: \"transparent\" }}\n        onClick={onOpen}\n      >\n        <Image\n          src=\"https://res.cloudinary.com/dvc7i8g1a/image/upload/v1709643622/icons8-group-48_asymxw.png\"\n          height={5}\n        />\n        {clubRequests && clubRequests.length > 0 && (\n          <Text\n            position=\"absolute\"\n            bottom=\"70%\"\n            right=\"70%\"\n            transform=\"translate(50%, 0)\"\n            bg=\"red.500\"\n            borderRadius=\"50%\"\n            width=\"2px\"\n            height=\"2px\"\n            p={1.5}\n          ></Text>\n        )}\n        <Text />\n      </Button>\n\n      <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay\n      bg=\"blackAlpha.300\"\n      backdropFilter=\"blur(10px) hue-rotate(90deg)\"\n    />\n        <ModalContent>\n          <ModalHeader textAlign={\"center\"}>Clubs Requests</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            display={\"flex\"}\n            justifyContent={\"center\"}\n            alignItems={\"center\"}\n            flexDir={\"column\"}\n            maxH={\"300px\"}\n          >\n            {clubRequests && clubRequests.length > 0 ? (\n              clubRequests.map((club, index) => (\n                <Box\n                  display={\"flex\"}\n                  justifyContent={\"space-between\"}\n                  alignItems={\"center\"}\n                  width={\"100%\"}\n                  key={index}\n                >\n                  <Button\n                    key={club._id}\n                    justifyContent={\"space-between\"}\n                    onClick={() => navigate(`/showclub/${club._id}`)}\n                  >\n                    {index + 1}. Club Name: {club.name}\n                  </Button>\n                  <Button\n                    background={\"#f05e56\"}\n                    onClick={() => declineRequest(club._id)}\n                  >\n                    {loading ? <Spinner size={\"small\"} /> : `Decline`}\n                  </Button>\n                </Box>\n              ))\n            ) : (\n              <>\n                <Text>All club requests have been replied to.</Text>\n              </>\n            )}\n          </ModalBody>\n\n          <ModalFooter fontSize={\"small\"} textDecor={\"underline\"}>\n            These requests were made by club coaches.\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\nexport default Requests;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Badge,\n  Image,\n  useBreakpointValue,\n  IconButton,\n  CloseButton,\n} from \"@chakra-ui/react\";\nimport { Menu, MenuButton, MenuItem, MenuList } from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { BellIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ChatState } from \"../components/Context/ChatProvider\";\nimport Requests from \"./Requests\";\nimport React from \"react\";\n\nfunction UpperNav() {\n  const { user, notification, setNotification } = ChatState();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const navigate = useNavigate();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    setNotification([]);\n    navigate(\"/\");\n  };\n\n  const displayValue = useBreakpointValue({ base: \"none\", md: \"flex\" });\n\n  const textVisibility = useBreakpointValue({\n    base: \"hidden\",\n    md: \"visible\",\n  });\n\n  return (\n    <>\n      <Box\n        display={\"flex\"}\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p={3}\n        paddingBottom={2}\n        boxShadow=\"2xl\"\n        zIndex={10}\n        top={0}\n        position={\"fixed\"}\n      >\n        <Text\n          textAlign={\"center\"}\n          fontSize={{ base: \"small\", md: \"medium\" }}\n          fontWeight={\"bold\"}\n          userSelect={\"none\"}\n          p={0}\n          m={0}\n          pl={3}\n        >\n          Worldsamma\n        </Text>\n        <Box display={\"flex\"} justifyContent={\"center\"} alignItems={\"center\"}>\n          <Button\n            backgroundColor={\"transparent\"}\n            display={displayValue}\n            visibility={textVisibility}\n            _hover={{ backgroundColor: \"transparent\", color: \"green.400\" }}\n            onClick={() => {\n              navigate(\"/dashboard\");\n            }}\n          >\n            My Programs\n          </Button>\n          <Button\n            variant=\"ghost\"\n            onClick={onOpen}\n            _hover={{ backgroundColor: \"transparent\", color: \"green.400\" }}\n          >\n            <Text\n              display={{ base: \"none\", md: \"flex\" }}\n              px={4}\n              userSelect={\"none\"}\n            >\n              Discover\n            </Text>\n          </Button>\n          <Requests />\n        </Box>\n\n        <div>\n          <Menu>\n            <MenuButton p={1} position=\"relative\">\n              <BellIcon fontSize=\"2xl\" p={0} m={0} />\n              {notification.length > 0 && (\n                <Badge\n                  variant=\"subtle\"\n                  position=\"absolute\"\n                  top=\"-3px\"\n                  right=\"-3px\"\n                  backgroundColor={\"red\"}\n                  zIndex={1}\n                  borderRadius={\"50%\"}\n                  color=\"white\"\n                >\n                  {notification.length}\n                </Badge>\n              )}\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {`New Message from ${\n                    notif.sender ? notif.sender.name : \"Coach\"\n                  } ADM: ${notif.sender ? notif.sender.admission : \" \"}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton\n              as={Button}\n              bg=\"white\"\n              _hover={{ backgroundColor: \"transparent\" }}\n              onClick={onOpen}\n            >\n              {displayValue === \"flex\" ? (\n                <Avatar\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={user?.name}\n                  src={user?.pic}\n                />\n              ) : (\n                <IconButton\n                  backgroundColor={\"transparent\"}\n                  icon={\n                    <Image\n                      src=\"https://res.cloudinary.com/dvc7i8g1a/image/upload/v1706276791/icons8-menu-50_afv1fe.png\"\n                      height={5}\n                    />\n                  }\n                />\n              )}\n            </MenuButton>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n      <DrawerOverlay\n      bg=\"blackAlpha.300\"\n      backdropFilter=\"blur(10px) hue-rotate(90deg)\"\n    />\n        <DrawerContent>\n          <DrawerHeader\n            borderBottomWidth=\"1px\"\n            display={\"flex\"}\n            justifyContent={\"space-between\"}\n          >\n            Dashboard\n            <CloseButton onClick={onClose} />\n          </DrawerHeader>\n          <DrawerBody\n            display={\"flex\"}\n            flexDir={\"column\"}\n            justifyContent={\"space-between\"}\n            width={\"100%\"}\n          >\n            <Box\n              padding={3}\n              display={\"flex\"}\n              justifyContent={\"space-around\"}\n              flexDir={\"column\"}\n            >\n              <Button\n                display={\"flex\"}\n                justifyContent={\"left\"}\n                alignItems={\"center\"}\n                background={\"white\"}\n                m={1}\n                _hover={{ backgroundColor: \"transparent\", color: \"green\" }}\n                onClick={() => navigate(\"/profile\")}\n              >\n                <Avatar\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={user?.name}\n                  src={user?.pic}\n                />\n                <Text p={2} m={1}>\n                  Profile\n                </Text>\n              </Button>\n              <Button\n                justifyContent={\"left\"}\n                background={\"white\"}\n                _hover={{ backgroundColor: \"transparent\", color: \"green\" }}\n                onClick={() => {\n                  navigate(\"/dashboard\");\n                  onClose();\n                }}\n              >\n                My Programs\n              </Button>\n              <Button\n                justifyContent={\"start\"}\n                background={\"white\"}\n                _hover={{ backgroundColor: \"transparent\", color: \"green\" }}\n                onClick={() => {\n                  navigate(\"/clubs\");\n                  onClose();\n                }}\n              >\n                Clubs\n              </Button>\n              <Button\n                justifyContent={\"left\"}\n                background={\"white\"}\n                _hover={{ backgroundColor: \"transparent\", color: \"green\" }}\n                isDisabled={!user?.provinces}\n                onClick={() => {\n                  navigate(\"/province\");\n                  onClose();\n                }}\n              >\n                Provincial level\n              </Button>\n              <Button\n                background={\"white\"}\n                justifyContent={\"left\"}\n                _hover={{ backgroundColor: \"transparent\", color: \"green\" }}\n                onClick={() => {\n                  navigate(\"/national\");\n                  onClose();\n                }}\n              >\n                National level\n              </Button>\n              <Button\n                background={\"white\"}\n                justifyContent={\"left\"}\n                _hover={{ backgroundColor: \"transparent\", color: \"green\" }}\n              >\n                International Championship\n              </Button>\n            </Box>\n            <Button onClick={logoutHandler}>Log out</Button>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default UpperNav;\n","import React, { useEffect, useState } from \"react\";\nimport { Box, Text, Button, useToast, Spinner } from \"@chakra-ui/react\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport UpperNav from \"../miscellenious/upperNav\";\nimport axios from \"axios\";\n\nconst CourseDetails = ({ courses, user }) => {\n  const { id } = useParams();\n  const courseId = parseInt(id, 10);\n  const course = courses.find((course) => course.id === courseId);\n  const [currentLessonIndex, setCurrentLessonIndex] = useState(0);\n  const [translatedText, setTranslatedText] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate();\n  const toast = useToast();\n\n  const goToNextLesson = () => {\n    setTranslatedText(\"\");\n    if (currentLessonIndex < course.lessons.length - 1) {\n      setCurrentLessonIndex((prevIndex) => prevIndex + 1);\n    }\n    if (currentLessonIndex + 1 === course.lessons.length) {\n      navigate(`/courses/${id}/submit/${course.title}`);\n    }\n  };\n  const currentLesson = course.lessons[currentLessonIndex];\n\n  const goToPreviousLesson = () => {\n    setTranslatedText(\"\");\n\n    if (currentLessonIndex > 0) {\n      setCurrentLessonIndex((prevIndex) => prevIndex - 1);\n    }\n  };\n\n  const translateText = async (text) => {\n    if (!user || !text) return;\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      setLoading(true);\n\n      const { data } = await axios.get(\n        `/api/translate?text=${text}&target=${user.language}`,\n        config\n      );\n\n      setTranslatedText(data);\n\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      toast({\n        title: \"Error Occured!\",\n        description: error.response.data.message,\n        status: \"error\",\n        duration: 5000,\n        isClosable: true,\n        position: \"bottom\",\n      });\n    }\n  };\n  // useEffect(() => {\n  //   if (\n  //     user &&\n  //     user.belt &&\n  //     user.belt.trim() + \" Belt\" !== course.title.trim()\n  //   ) {\n  //     navigate(\"/dashboard\");\n  //   }\n  // }, [user, course, navigate]);\n\n  return (\n    <Box backgroundColor={\"white\"} width={\"100%\"}>\n      <UpperNav />\n      <Text fontSize=\"24px\" fontWeight=\"bold\" mb={4} mt={55}>\n        {course.title}\n      </Text>\n      <Box\n        display={\"flex\"}\n        flexDir={\"column\"}\n        justifyContent={\"center\"}\n        alignItems={\"center\"}\n        background={\"white\"}\n      >\n        <Box mb={4}>\n          <Text fontSize=\"large\" fontWeight=\"medium\">\n            {currentLesson.title}/{course.lessons.length}\n            <Text fontSize={\"small\"}>\n              {\" \"}\n              *Optimize Your Viewing: Switch to Fullscreen\n            </Text>\n          </Text>\n          <iframe\n            title={`Lesson ${currentLesson.id}`}\n            width=\"100%\"\n            height=\"315\"\n            src={currentLesson.video}\n            allowFullScreen\n            style={{ maxWidth: \"800px\", margin: \"0 auto\" }}\n          ></iframe>\n          <Text mt={2} textAlign={\"center\"} p={2} width={\"100%\"}>\n            <Button\n              background=\"transparent\"\n              _hover={{ backgroundColor: \"transparent\", color: \"green\" }}\n              color={\"purple\"}\n              onClick={() => translateText(currentLesson.notes)}\n              textDecoration={\"underline\"}\n            >\n              Translate{loading && <Spinner size={\"sm\"} />}\n            </Button>\n            {translatedText ? translatedText : currentLesson.notes}\n          </Text>\n        </Box>\n        <Box\n          display=\"flex\"\n          alignItems={\"center\"}\n          justifyContent=\"space-evenly\"\n          width={\"100%\"}\n        >\n          <Button\n            onClick={goToPreviousLesson}\n            disabled={currentLessonIndex === 0}\n            borderRadius={20}\n          >\n            Previous Lesson\n          </Button>\n          <Button\n            onClick={goToNextLesson}\n            disabled={currentLessonIndex === course.lessons.length - 1}\n            borderRadius={20}\n          >\n            Next Lesson\n          </Button>\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nexport default CourseDetails;\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { SystemStyleObject } from \"@chakra-ui/system\"\n\nexport const [AvatarStylesProvider, useAvatarStyles] = createContext<\n  Record<string, SystemStyleObject>\n>({\n  name: `AvatarStylesContext`,\n  hookName: `useAvatarStyles`,\n  providerName: \"<Avatar/>\",\n})\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { useAvatarStyles } from \"./avatar-context\"\nimport { AvatarOptions } from \"./avatar-types\"\n\nexport function initials(name: string) {\n  const names = name.split(\" \")\n  const firstName = names[0] ?? \"\"\n  const lastName = names.length > 1 ? names[names.length - 1] : \"\"\n  return firstName && lastName\n    ? `${firstName.charAt(0)}${lastName.charAt(0)}`\n    : firstName.charAt(0)\n}\n\ninterface AvatarNameProps\n  extends HTMLChakraProps<\"div\">,\n    Pick<AvatarOptions, \"name\" | \"getInitials\"> {}\n/**\n * The avatar name container\n */\n\nexport function AvatarName(props: AvatarNameProps) {\n  const { name, getInitials, ...rest } = props\n  const styles = useAvatarStyles()\n\n  return (\n    <chakra.div role=\"img\" aria-label={name} {...rest} __css={styles.label}>\n      {name ? getInitials?.(name) : null}\n    </chakra.div>\n  )\n}\n\nAvatarName.displayName = \"AvatarName\"\n","import { chakra, ChakraComponent } from \"@chakra-ui/system\"\n\n/**\n * Fallback avatar react component.\n * This should be a generic svg used to represent an avatar\n */\nexport const GenericAvatarIcon: ChakraComponent<\"svg\"> = (props) => (\n  <chakra.svg\n    viewBox=\"0 0 128 128\"\n    color=\"#fff\"\n    width=\"100%\"\n    height=\"100%\"\n    className=\"chakra-avatar__svg\"\n    {...props}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\"\n    />\n    <path\n      fill=\"currentColor\"\n      d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\"\n    />\n  </chakra.svg>\n)\n","import { ImageProps, useImage } from \"@chakra-ui/image\"\nimport { chakra, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cloneElement } from \"react\"\nimport { AvatarName } from \"./avatar-name\"\nimport { GenericAvatarIcon } from \"./generic-avatar-icon\"\n\ntype AvatarImageProps = ImageProps & {\n  getInitials?: (name: string) => string\n  borderRadius?: SystemStyleObject[\"borderRadius\"]\n  icon: React.ReactElement\n  iconLabel?: string\n  name?: string\n}\n\nexport function AvatarImage(props: AvatarImageProps) {\n  const {\n    src,\n    srcSet,\n    onError,\n    onLoad,\n    getInitials,\n    name,\n    borderRadius,\n    loading,\n    iconLabel,\n    icon = <GenericAvatarIcon />,\n    ignoreFallback,\n    referrerPolicy,\n    crossOrigin,\n  } = props\n\n  /**\n   * use the image hook to only show the image when it has loaded\n   */\n  const status = useImage({ src, onError, crossOrigin, ignoreFallback })\n\n  const hasLoaded = status === \"loaded\"\n\n  /**\n   * Fallback avatar applies under 2 conditions:\n   * - If `src` was passed and the image has not loaded or failed to load\n   * - If `src` wasn't passed\n   *\n   * In this case, we'll show either the name avatar or default avatar\n   */\n  const showFallback = !src || !hasLoaded\n\n  if (showFallback) {\n    return name ? (\n      <AvatarName\n        className=\"chakra-avatar__initials\"\n        getInitials={getInitials}\n        name={name}\n      />\n    ) : (\n      cloneElement(icon, {\n        role: \"img\",\n        \"aria-label\": iconLabel,\n      })\n    )\n  }\n\n  /**\n   * If `src` was passed and the image has loaded, we'll show it\n   */\n  return (\n    <chakra.img\n      src={src}\n      srcSet={srcSet}\n      alt={name}\n      onLoad={onLoad}\n      referrerPolicy={referrerPolicy}\n      crossOrigin={crossOrigin ?? undefined}\n      className=\"chakra-avatar__img\"\n      loading={loading}\n      __css={{\n        width: \"100%\",\n        height: \"100%\",\n        objectFit: \"cover\",\n        borderRadius,\n      }}\n    />\n  )\n}\n\nAvatarImage.displayName = \"AvatarImage\"\n","import {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useMultiStyleConfig,\n} from \"@chakra-ui/system\"\nimport { callAllHandlers, cx, dataAttr } from \"@chakra-ui/shared-utils\"\nimport { AvatarStylesProvider } from \"./avatar-context\"\nimport { AvatarImage } from \"./avatar-image\"\nimport { GenericAvatarIcon } from \"./generic-avatar-icon\"\nimport { initials } from \"./avatar-name\"\nimport { AvatarOptions } from \"./avatar-types\"\nimport { useState } from \"react\"\n\nexport const baseStyle: SystemStyleObject = {\n  display: \"inline-flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  textAlign: \"center\",\n  textTransform: \"uppercase\",\n  fontWeight: \"medium\",\n  position: \"relative\",\n  flexShrink: 0,\n}\n\nexport interface AvatarProps\n  extends Omit<HTMLChakraProps<\"span\">, \"onError\">,\n    AvatarOptions,\n    ThemingProps<\"Avatar\"> {\n  crossOrigin?: HTMLChakraProps<\"img\">[\"crossOrigin\"]\n  iconLabel?: string\n  /**\n   * If `true`, opt out of the avatar's `fallback` logic and\n   * renders the `img` at all times.\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n}\n\n/**\n * Avatar component that renders an user avatar with\n * support for fallback avatar and name-only avatars\n */\nexport const Avatar = forwardRef<AvatarProps, \"span\">((props, ref) => {\n  const styles = useMultiStyleConfig(\"Avatar\", props)\n  const [isLoaded, setIsLoaded] = useState(false)\n\n  const {\n    src,\n    srcSet,\n    name,\n    showBorder,\n    borderRadius = \"full\",\n    onError,\n    onLoad: onLoadProp,\n    getInitials = initials,\n    icon = <GenericAvatarIcon />,\n    iconLabel = \" avatar\",\n    loading,\n    children,\n    borderColor,\n    ignoreFallback,\n    crossOrigin,\n    referrerPolicy,\n    ...rest\n  } = omitThemingProps(props)\n\n  const avatarStyles: SystemStyleObject = {\n    borderRadius,\n    borderWidth: showBorder ? \"2px\" : undefined,\n    ...baseStyle,\n    ...styles.container,\n  }\n\n  if (borderColor) {\n    avatarStyles.borderColor = borderColor\n  }\n\n  return (\n    <chakra.span\n      ref={ref}\n      {...rest}\n      className={cx(\"chakra-avatar\", props.className)}\n      data-loaded={dataAttr(isLoaded)}\n      __css={avatarStyles}\n    >\n      <AvatarStylesProvider value={styles}>\n        <AvatarImage\n          src={src}\n          srcSet={srcSet}\n          loading={loading}\n          onLoad={callAllHandlers(onLoadProp, () => {\n            setIsLoaded(true)\n          })}\n          onError={onError}\n          getInitials={getInitials}\n          name={name}\n          borderRadius={borderRadius}\n          icon={icon}\n          iconLabel={iconLabel}\n          ignoreFallback={ignoreFallback}\n          crossOrigin={crossOrigin}\n          referrerPolicy={referrerPolicy}\n        />\n        {children}\n      </AvatarStylesProvider>\n    </chakra.span>\n  )\n})\n\nAvatar.displayName = \"Avatar\"\n","import { createIcon } from \"@chakra-ui/icon\"\n\nexport const BellIcon = createIcon({\n  displayName: \"BellIcon\",\n  d: \"M12 22c1.1 0 2-.9 2-2h-4c0 1.1.89 2 2 2zm6-6v-5c0-3.07-1.64-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.63 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z\",\n})\n","import { forwardRef } from \"@chakra-ui/system\"\nimport { Children } from \"react\"\nimport { Icon, IconProps } from \"./icon\"\n\ninterface CreateIconOptions {\n  /**\n   * The icon `svg` viewBox\n   * @default \"0 0 24 24\"\n   */\n  viewBox?: string\n  /**\n   * The `svg` path or group element\n   * @type React.ReactElement | React.ReactElement[]\n   */\n  path?: React.ReactElement | React.ReactElement[]\n  /**\n   * If the `svg` has a single path, simply copy the path's `d` attribute\n   */\n  d?: string\n  /**\n   * The display name useful in the dev tools\n   */\n  displayName?: string\n  /**\n   * Default props automatically passed to the component; overwritable\n   */\n  defaultProps?: IconProps\n}\n\nexport function createIcon(options: CreateIconOptions) {\n  const {\n    viewBox = \"0 0 24 24\",\n    d: pathDefinition,\n    displayName,\n    defaultProps = {},\n  } = options\n  const path = Children.toArray(options.path)\n\n  const Comp = forwardRef<IconProps, \"svg\">((props, ref) => (\n    <Icon ref={ref} viewBox={viewBox} {...defaultProps} {...props}>\n      {path.length ? path : <path fill=\"currentColor\" d={pathDefinition} />}\n    </Icon>\n  ))\n\n  Comp.displayName = displayName\n\n  return Comp\n}\n","import {\n  chakra,\n  forwardRef,\n  omitThemingProps,\n  ThemingProps,\n  useStyleConfig,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\n\nexport interface BadgeProps\n  extends HTMLChakraProps<\"span\">,\n    ThemingProps<\"Badge\"> {}\n\n/**\n * React component used to display notifications, messages, or\n * statuses in different shapes and sizes.\n *\n * @see Docs https://chakra-ui.com/badge\n */\nexport const Badge = forwardRef<BadgeProps, \"span\">(function Badge(props, ref) {\n  const styles = useStyleConfig(\"Badge\", props)\n  const { className, ...rest } = omitThemingProps(props)\n\n  return (\n    <chakra.span\n      ref={ref}\n      className={cx(\"chakra-badge\", props.className)}\n      {...rest}\n      __css={{\n        display: \"inline-block\",\n        whiteSpace: \"nowrap\",\n        verticalAlign: \"middle\",\n        ...styles,\n      }}\n    />\n  )\n})\n\nBadge.displayName = \"Badge\"\n","import { useTheme } from \"@chakra-ui/system\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { useMediaQuery } from \"./use-media-query\"\n\nexport type UseBreakpointOptions = {\n  ssr?: boolean\n  fallback?: string\n}\n\n/**\n * React hook used to get the current responsive media breakpoint.\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent.\n */\nexport function useBreakpoint(arg?: string | UseBreakpointOptions) {\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" }\n  const theme = useTheme()\n\n  const breakpoints = theme.__breakpoints!.details.map(\n    ({ minMaxQuery, breakpoint }) => ({\n      breakpoint,\n      query: minMaxQuery.replace(\"@media screen and \", \"\"),\n    }),\n  )\n\n  const fallback = breakpoints.map((bp) => bp.breakpoint === opts.fallback)\n  const values = useMediaQuery(\n    breakpoints.map((bp) => bp.query),\n    { fallback, ssr: opts.ssr },\n  )\n\n  const index = values.findIndex((value) => value == true)\n  return breakpoints[index]?.breakpoint ?? opts.fallback\n}\n","import { useEnvironment } from \"@chakra-ui/react-env\"\nimport { useEffect, useState } from \"react\"\n\nexport type UseMediaQueryOptions = {\n  fallback?: boolean | boolean[]\n  ssr?: boolean\n}\n\n/**\n * React hook that tracks state of a CSS media query\n *\n * @param query the media query to match\n * @param options the media query options { fallback, ssr }\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-media-query\n */\nexport function useMediaQuery(\n  query: string | string[],\n  options: UseMediaQueryOptions = {},\n): boolean[] {\n  const { ssr = true, fallback } = options\n\n  const { getWindow } = useEnvironment()\n\n  const queries = Array.isArray(query) ? query : [query]\n\n  let fallbackValues = Array.isArray(fallback) ? fallback : [fallback]\n  fallbackValues = fallbackValues.filter((v) => v != null) as boolean[]\n\n  const [value, setValue] = useState(() => {\n    return queries.map((query, index) => ({\n      media: query,\n      matches: ssr\n        ? !!fallbackValues[index]\n        : getWindow().matchMedia(query).matches,\n    }))\n  })\n\n  useEffect(() => {\n    const win = getWindow()\n    setValue(\n      queries.map((query) => ({\n        media: query,\n        matches: win.matchMedia(query).matches,\n      })),\n    )\n\n    const mql = queries.map((query) => win.matchMedia(query))\n\n    const handler = (evt: MediaQueryListEvent) => {\n      setValue((prev) => {\n        return prev.slice().map((item) => {\n          if (item.media === evt.media) return { ...item, matches: evt.matches }\n          return item\n        })\n      })\n    }\n\n    mql.forEach((mql) => {\n      if (typeof mql.addListener === \"function\") {\n        mql.addListener(handler)\n      } else {\n        mql.addEventListener(\"change\", handler)\n      }\n    })\n\n    return () => {\n      mql.forEach((mql) => {\n        if (typeof mql.removeListener === \"function\") {\n          mql.removeListener(handler)\n        } else {\n          mql.removeEventListener(\"change\", handler)\n        }\n      })\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [getWindow])\n\n  return value.map((item) => item.matches)\n}\n","import { useTheme } from \"@chakra-ui/system\"\nimport { isObject } from \"@chakra-ui/shared-utils\"\nimport { arrayToObjectNotation } from \"@chakra-ui/breakpoint-utils\"\nimport { getClosestValue } from \"./media-query.utils\"\nimport { useBreakpoint, UseBreakpointOptions } from \"./use-breakpoint\"\n\n/**\n * React hook for getting the value for the current breakpoint from the\n * provided responsive values object.\n *\n * For SSR, you can use a package like [is-mobile](https://github.com/kaimallea/isMobile)\n * to get the default breakpoint value from the user-agent\n *\n * @example\n * const width = useBreakpointValue({ base: '150px', md: '250px' })\n *\n * @see Docs https://chakra-ui.com/docs/hooks/use-breakpoint-value\n */\nexport function useBreakpointValue<T = any>(\n  values: Partial<Record<string, T>> | Array<T | null>,\n  arg?: UseBreakpointOptions | string,\n): T | undefined {\n  const opts = isObject(arg) ? arg : { fallback: arg ?? \"base\" }\n  const breakpoint = useBreakpoint(opts)\n  const theme = useTheme()\n\n  if (!breakpoint) return\n\n  /**\n   * Get the sorted breakpoint keys from the provided breakpoints\n   */\n  const breakpoints = Array.from(theme.__breakpoints?.keys || [])\n\n  const obj = Array.isArray(values)\n    ? Object.fromEntries<any>(\n        Object.entries(arrayToObjectNotation(values, breakpoints)).map(\n          ([key, value]) => [key, value],\n        ),\n      )\n    : values\n\n  return getClosestValue(obj, breakpoint, breakpoints)\n}\n","import { breakpoints as defaultBreakPoints } from \"@chakra-ui/breakpoint-utils\"\n\nexport function getClosestValue<T = any>(\n  values: Record<string, T>,\n  breakpoint: string,\n  breakpoints = defaultBreakPoints,\n) {\n  let index = Object.keys(values).indexOf(breakpoint)\n\n  if (index !== -1) {\n    return values[breakpoint]\n  }\n\n  let stopIndex = breakpoints.indexOf(breakpoint)\n\n  while (stopIndex >= 0) {\n    const key = breakpoints[stopIndex]\n\n    if (values.hasOwnProperty(key)) {\n      index = stopIndex\n      break\n    }\n    stopIndex -= 1\n  }\n\n  if (index !== -1) {\n    const key = breakpoints[index]\n    return values[key]\n  }\n\n  return undefined\n}\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  AnimatePresence,\n  HTMLMotionProps,\n  motion,\n  MotionStyle,\n  Variants as TVariants,\n} from \"framer-motion\"\nimport { forwardRef } from \"react\"\nimport {\n  SlideDirection,\n  getSlideTransition,\n  TRANSITION_EASINGS,\n  Variants,\n  withDelay,\n  WithTransitionConfig,\n} from \"./transition-utils\"\n\nexport type { SlideDirection }\n\nconst defaultTransition = {\n  exit: {\n    duration: 0.15,\n    ease: TRANSITION_EASINGS.easeInOut,\n  },\n  enter: {\n    type: \"spring\",\n    damping: 25,\n    stiffness: 180,\n  },\n}\n\nconst variants: Variants<SlideOptions> = {\n  exit: ({ direction, transition, transitionEnd, delay }) => {\n    const { exit: exitStyles } = getSlideTransition({ direction })\n    return {\n      ...exitStyles,\n      transition:\n        transition?.exit ?? withDelay.exit(defaultTransition.exit, delay),\n      transitionEnd: transitionEnd?.exit,\n    }\n  },\n  enter: ({ direction, transitionEnd, transition, delay }) => {\n    const { enter: enterStyles } = getSlideTransition({ direction })\n    return {\n      ...enterStyles,\n      transition:\n        transition?.enter ?? withDelay.enter(defaultTransition.enter, delay),\n      transitionEnd: transitionEnd?.enter,\n    }\n  },\n}\n\nexport interface SlideOptions {\n  /**\n   * The direction to slide from\n   * @default \"right\"\n   */\n  direction?: SlideDirection\n}\n\nexport interface SlideProps\n  extends WithTransitionConfig<HTMLMotionProps<\"div\">>,\n    SlideOptions {\n  motionProps?: HTMLMotionProps<\"div\">\n}\n\nexport const Slide = forwardRef<HTMLDivElement, SlideProps>(function Slide(\n  props,\n  ref,\n) {\n  const {\n    direction = \"right\",\n    style,\n    unmountOnExit,\n    in: isOpen,\n    className,\n    transition,\n    transitionEnd,\n    delay,\n    motionProps,\n    ...rest\n  } = props\n\n  const transitionStyles = getSlideTransition({ direction })\n  const computedStyle: MotionStyle = Object.assign(\n    { position: \"fixed\" },\n    transitionStyles.position,\n    style,\n  )\n\n  const show = unmountOnExit ? isOpen && unmountOnExit : true\n  const animate = isOpen || unmountOnExit ? \"enter\" : \"exit\"\n\n  const custom = { transitionEnd, transition, direction, delay }\n\n  return (\n    <AnimatePresence custom={custom}>\n      {show && (\n        <motion.div\n          {...rest}\n          ref={ref}\n          initial=\"exit\"\n          className={cx(\"chakra-slide\", className)}\n          animate={animate}\n          exit=\"exit\"\n          custom={custom}\n          variants={variants as TVariants}\n          style={computedStyle}\n          {...motionProps}\n        />\n      )}\n    </AnimatePresence>\n  )\n})\n\nSlide.displayName = \"Slide\"\n","import { cx } from \"@chakra-ui/shared-utils\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  SystemStyleObject,\n} from \"@chakra-ui/system\"\nimport { Slide } from \"@chakra-ui/transition\"\nimport type { HTMLMotionProps } from \"framer-motion\"\n\nimport { useDrawerContext } from \"./drawer\"\nimport { useModalContext, useModalStyles } from \"./modal\"\nimport { ModalFocusScope } from \"./modal-focus\"\n\nconst MotionDiv = chakra(Slide)\n\nexport interface DrawerContentProps extends HTMLChakraProps<\"section\"> {\n  /**\n   * The props to forward to the modal's content wrapper\n   */\n  containerProps?: HTMLChakraProps<\"div\">\n  /**\n   * The custom framer-motion transition to use for the modal\n   */\n  motionProps?: HTMLMotionProps<\"section\">\n}\n\n/**\n * ModalContent is used to group modal's content. It has all the\n * necessary `aria-*` properties to indicate that it is a modal\n */\nexport const DrawerContent = forwardRef<DrawerContentProps, \"section\">(\n  (props, ref) => {\n    const {\n      className,\n      children,\n      motionProps,\n      containerProps: rootProps,\n      ...rest\n    } = props\n\n    const { getDialogProps, getDialogContainerProps, isOpen } =\n      useModalContext()\n\n    const dialogProps = getDialogProps(rest, ref) as any\n    const containerProps = getDialogContainerProps(rootProps)\n\n    const _className = cx(\"chakra-modal__content\", className)\n\n    const styles = useModalStyles()\n\n    const dialogStyles: SystemStyleObject = {\n      display: \"flex\",\n      flexDirection: \"column\",\n      position: \"relative\",\n      width: \"100%\",\n      outline: 0,\n      ...styles.dialog,\n    }\n\n    const dialogContainerStyles: SystemStyleObject = {\n      display: \"flex\",\n      width: \"100vw\",\n      height: \"$100vh\",\n      position: \"fixed\",\n      left: 0,\n      top: 0,\n      ...styles.dialogContainer,\n    }\n\n    const { placement } = useDrawerContext()\n\n    return (\n      <ModalFocusScope>\n        <chakra.div\n          {...containerProps}\n          className=\"chakra-modal__content-container\"\n          __css={dialogContainerStyles}\n        >\n          <MotionDiv\n            motionProps={motionProps}\n            direction={placement}\n            in={isOpen}\n            className={_className}\n            {...dialogProps}\n            __css={dialogStyles}\n          >\n            {children}\n          </MotionDiv>\n        </chakra.div>\n      </ModalFocusScope>\n    )\n  },\n)\n\nDrawerContent.displayName = \"DrawerContent\"\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { ThemingProps, useTheme } from \"@chakra-ui/system\"\nimport { SlideOptions } from \"@chakra-ui/transition\"\nimport { Modal, ModalProps } from \"./modal\"\n\nconst [DrawerContextProvider, useDrawerContext] = createContext<DrawerOptions>()\n\ntype LogicalPlacement = \"start\" | \"end\"\ntype LogicalPlacementMap = Record<\n  LogicalPlacement,\n  { ltr: SlideOptions[\"direction\"]; rtl: SlideOptions[\"direction\"] }\n>\ntype DrawerPlacement = SlideOptions[\"direction\"] | LogicalPlacement\n\nconst placementMap: LogicalPlacementMap = {\n  start: { ltr: \"left\", rtl: \"right\" },\n  end: { ltr: \"right\", rtl: \"left\" },\n}\n\nfunction getDrawerPlacement(\n  placement: DrawerPlacement | undefined,\n  dir: \"ltr\" | \"rtl\",\n) {\n  if (!placement) return\n  //@ts-expect-error\n  return placementMap[placement]?.[dir] ?? placement\n}\n\ninterface DrawerOptions {\n  /**\n   * The placement of the drawer\n   * @default \"right\"\n   */\n  placement?: DrawerPlacement\n  /**\n   * If `true` and drawer's placement is `top` or `bottom`,\n   * the drawer will occupy the viewport height (100vh)\n   */\n  isFullHeight?: boolean\n}\n\nexport interface DrawerProps\n  extends DrawerOptions,\n    ThemingProps<\"Drawer\">,\n    Omit<\n      ModalProps,\n      \"scrollBehavior\" | \"motionPreset\" | \"isCentered\" | keyof ThemingProps\n    > {}\n\n/**\n * The Drawer component is a panel that slides out from the edge of the screen.\n * It can be useful when you need users to complete a task or view some details without leaving the current page.\n *\n * @see Docs https://chakra-ui.com/docs/components/drawer\n */\nexport function Drawer(props: DrawerProps) {\n  const {\n    isOpen,\n    onClose,\n    placement: placementProp = \"right\",\n    children,\n    ...rest\n  } = props\n\n  const theme = useTheme()\n  const drawerStyleConfig = theme.components?.Drawer\n  const placement = getDrawerPlacement(placementProp, theme.direction)\n\n  return (\n    <DrawerContextProvider value={{ placement }}>\n      <Modal\n        isOpen={isOpen}\n        onClose={onClose}\n        styleConfig={drawerStyleConfig}\n        {...rest}\n      >\n        {children}\n      </Modal>\n    </DrawerContextProvider>\n  )\n}\n\nexport { ModalBody as DrawerBody } from \"./modal-body\"\nexport { ModalCloseButton as DrawerCloseButton } from \"./modal-close-button\"\nexport { ModalFooter as DrawerFooter } from \"./modal-footer\"\nexport { ModalHeader as DrawerHeader } from \"./modal-header\"\nexport { ModalOverlay as DrawerOverlay } from \"./modal-overlay\"\n\nexport { useDrawerContext }\n"],"names":["Requests","isOpen","onOpen","onClose","useDisclosure","clubRequests","setClubRequests","useState","loading","setLoading","user","ChatState","navigate","useNavigate","fetchClubRequests","useCallback","async","config","headers","Authorization","concat","token","data","axios","get","_id","error","console","useEffect","_jsxs","_Fragment","children","Button","backgroundColor","_hover","onClick","_jsx","Image","src","height","length","Text","position","bottom","right","transform","bg","borderRadius","width","p","Modal","ModalOverlay","backdropFilter","ModalContent","ModalHeader","textAlign","ModalCloseButton","ModalBody","display","justifyContent","alignItems","flexDir","maxH","map","club","index","Box","name","background","clubId","declineRequest","Spinner","size","ModalFooter","fontSize","textDecor","notification","setNotification","displayValue","useBreakpointValue","base","md","textVisibility","w","paddingBottom","boxShadow","zIndex","top","fontWeight","userSelect","m","pl","visibility","color","variant","px","Menu","MenuButton","BellIcon","Badge","MenuList","notif","MenuItem","filter","n","sender","admission","as","Avatar","cursor","pic","IconButton","icon","Drawer","placement","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","CloseButton","DrawerBody","padding","isDisabled","provinces","logoutHandler","localStorage","removeItem","_ref","courses","id","useParams","courseId","parseInt","course","find","currentLessonIndex","setCurrentLessonIndex","translatedText","setTranslatedText","toast","useToast","currentLesson","lessons","UpperNav","mb","mt","title","video","allowFullScreen","style","maxWidth","margin","text","language","description","response","message","status","duration","isClosable","translateText","notes","textDecoration","goToPreviousLesson","prevIndex","disabled","goToNextLesson","AvatarStylesProvider","useAvatarStyles","createContext","hookName","providerName","initials","_a","names","split","firstName","lastName","charAt","AvatarName","props","getInitials","rest","styles","jsx","chakra","div","role","__css","label","displayName","GenericAvatarIcon","jsxs","svg","viewBox","className","fill","d","AvatarImage","srcSet","onError","onLoad","iconLabel","ignoreFallback","referrerPolicy","crossOrigin","useImage","cloneElement","img","alt","objectFit","baseStyle","textTransform","flexShrink","forwardRef","ref","useMultiStyleConfig","isLoaded","setIsLoaded","showBorder","onLoadProp","borderColor","omitThemingProps","avatarStyles","borderWidth","container","span","cx","dataAttr","value","callAllHandlers","options","pathDefinition","defaultProps","path","Children","toArray","Comp","Icon","createIcon","useStyleConfig","whiteSpace","verticalAlign","useBreakpoint","arg","_b","opts","isObject","fallback","breakpoints","useTheme","__breakpoints","details","minMaxQuery","breakpoint","query","replace","bp","values","arguments","undefined","ssr","getWindow","useEnvironment","queries","Array","isArray","fallbackValues","v","setValue","query2","media","matches","matchMedia","win","mql","handler","evt","prev","slice","item","forEach","mql2","addListener","addEventListener","removeListener","removeEventListener","useMediaQuery","findIndex","theme","from","keys","defaultBreakPoints","Object","indexOf","stopIndex","key","hasOwnProperty","getClosestValue","fromEntries","entries","arrayToObjectNotation","defaultTransition","exit","ease","TRANSITION_EASINGS","easeInOut","enter","type","damping","stiffness","variants","direction","transition","transitionEnd","delay","exitStyles","getSlideTransition","withDelay","_ref2","enterStyles","Slide","unmountOnExit","in","motionProps","transitionStyles","computedStyle","assign","show","animate","custom","AnimatePresence","motion","initial","MotionDiv","containerProps","rootProps","getDialogProps","getDialogContainerProps","useModalContext","dialogProps","_className","useModalStyles","dialogStyles","flexDirection","outline","dialog","dialogContainerStyles","left","dialogContainer","useDrawerContext","ModalFocusScope","DrawerContextProvider","placementMap","start","ltr","rtl","end","placementProp","drawerStyleConfig","components","dir","getDrawerPlacement","styleConfig"],"sourceRoot":""}