{"version":3,"file":"static/js/900.7a840638.chunk.js","mappings":"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","sources":["pages/NotFound.js","../node_modules/@chakra-ui/button/src/button-context.ts","../node_modules/@chakra-ui/button/src/button-icon.tsx","../node_modules/@chakra-ui/button/src/button-spinner.tsx","../node_modules/@chakra-ui/button/src/button.tsx","../node_modules/@chakra-ui/button/src/use-button-type.tsx","../node_modules/@chakra-ui/image/src/native-image.tsx","../node_modules/utilities/object-utils/src/omit.ts","../node_modules/@chakra-ui/image/src/image.tsx","../node_modules/@chakra-ui/image/src/use-image.ts","../node_modules/@chakra-ui/layout/src/flex.tsx","../node_modules/@chakra-ui/react-use-merge-refs/src/index.ts"],"sourcesContent":["// NotFound.js\nimport { Box, Button, Flex, Image, Text } from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst NotFound = () => {\n  const navigate = useNavigate();\n  return (\n    <Flex\n      display=\"flex\"\n      justifyContent={\"center\"}\n      alignItems={\"center\"}\n      width={\"100%\"}\n    >\n      <Box\n        display=\"flex\"\n        flexDirection={\"column\"}\n        justifyContent={\"space-between\"}\n        alignItems={\"center\"}\n        backgroundColor={\"Background\"}\n        padding={8}\n        width={\"98%\"}\n      >\n        <Image\n          src=\"https://res.cloudinary.com/dvc7i8g1a/image/upload/v1696073349/icons8-not-found-64_rxa6yk.png\"\n          loading=\"lazy\"\n          alt=\"Not Found\"\n        />\n        <Text fontSize={\"2xl\"}>404 - Page Not Found</Text>\n        <Text textAlign={\"center\"}>\n          {\" \"}\n          The page you are looking for does not exist.\n        </Text>\n        <Button\n          margin={3}\n          backgroundColor={\"green.400\"}\n          onClick={() => navigate(\"/dashboard\")}\n        >\n          Return back to my programs.\n        </Button>\n      </Box>\n    </Flex>\n  );\n};\n\nexport default NotFound;\n","import { createContext } from \"@chakra-ui/react-context\"\nimport { ThemingProps } from \"@chakra-ui/system\"\n\nexport interface ButtonGroupContext extends ThemingProps<\"Button\"> {\n  /**\n   * @default false\n   */\n  isDisabled?: boolean\n}\n\nexport const [ButtonGroupProvider, useButtonGroup] =\n  createContext<ButtonGroupContext>({\n    strict: false,\n    name: \"ButtonGroupContext\",\n  })\n","import { chakra, HTMLChakraProps } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { cloneElement, isValidElement } from \"react\"\n\nexport function ButtonIcon(props: HTMLChakraProps<\"span\">) {\n  const { children, className, ...rest } = props\n\n  const _children = isValidElement(children)\n    ? cloneElement<any>(children, {\n        \"aria-hidden\": true,\n        focusable: false,\n      })\n    : children\n\n  const _className = cx(\"chakra-button__icon\", className)\n\n  return (\n    <chakra.span\n      display=\"inline-flex\"\n      alignSelf=\"center\"\n      flexShrink={0}\n      {...rest}\n      className={_className}\n    >\n      {_children}\n    </chakra.span>\n  )\n}\n\nButtonIcon.displayName = \"ButtonIcon\"\n","import { Spinner } from \"@chakra-ui/spinner\"\nimport { chakra, HTMLChakraProps, SystemStyleObject } from \"@chakra-ui/system\"\nimport { cx } from \"@chakra-ui/shared-utils\"\nimport { useMemo } from \"react\"\nimport { ButtonSpinnerOptions } from \"./button-types\"\n\ninterface ButtonSpinnerProps\n  extends HTMLChakraProps<\"div\">,\n    ButtonSpinnerOptions {}\n\nexport function ButtonSpinner(props: ButtonSpinnerProps) {\n  const {\n    label,\n    placement,\n    spacing = \"0.5rem\",\n    children = <Spinner color=\"currentColor\" width=\"1em\" height=\"1em\" />,\n    className,\n    __css,\n    ...rest\n  } = props\n\n  const _className = cx(\"chakra-button__spinner\", className)\n\n  const marginProp = placement === \"start\" ? \"marginEnd\" : \"marginStart\"\n\n  const spinnerStyles: SystemStyleObject = useMemo(\n    () => ({\n      display: \"flex\",\n      alignItems: \"center\",\n      position: label ? \"relative\" : \"absolute\",\n      [marginProp]: label ? spacing : 0,\n      fontSize: \"1em\",\n      lineHeight: \"normal\",\n      ...__css,\n    }),\n    [__css, label, marginProp, spacing],\n  )\n\n  return (\n    <chakra.div className={_className} {...rest} __css={spinnerStyles}>\n      {children}\n    </chakra.div>\n  )\n}\nButtonSpinner.displayName = \"ButtonSpinner\"\n","import { useMergeRefs } from \"@chakra-ui/react-use-merge-refs\"\nimport {\n  chakra,\n  forwardRef,\n  HTMLChakraProps,\n  omitThemingProps,\n  SystemStyleObject,\n  ThemingProps,\n  useStyleConfig,\n} from \"@chakra-ui/system\"\nimport { cx, dataAttr } from \"@chakra-ui/shared-utils\"\n\nimport { useMemo } from \"react\"\nimport { useButtonGroup } from \"./button-context\"\nimport { ButtonIcon } from \"./button-icon\"\nimport { ButtonSpinner } from \"./button-spinner\"\nimport { ButtonOptions } from \"./button-types\"\nimport { useButtonType } from \"./use-button-type\"\n\nexport interface ButtonProps\n  extends HTMLChakraProps<\"button\">,\n    ButtonOptions,\n    ThemingProps<\"Button\"> {}\n\n/**\n * Button component is used to trigger an action or event, such as submitting a form, opening a Dialog, canceling an action, or performing a delete operation.\n *\n * @see Docs https://chakra-ui.com/docs/components/button\n * @see WAI-ARIA https://www.w3.org/WAI/ARIA/apg/patterns/button/\n */\nexport const Button = forwardRef<ButtonProps, \"button\">((props, ref) => {\n  const group = useButtonGroup()\n  const styles = useStyleConfig(\"Button\", { ...group, ...props })\n\n  const {\n    isDisabled = group?.isDisabled,\n    isLoading,\n    isActive,\n    children,\n    leftIcon,\n    rightIcon,\n    loadingText,\n    iconSpacing = \"0.5rem\",\n    type,\n    spinner,\n    spinnerPlacement = \"start\",\n    className,\n    as,\n    ...rest\n  } = omitThemingProps(props)\n\n  /**\n   * When button is used within ButtonGroup (i.e. flushed with sibling buttons),\n   * it is important to add a `zIndex` on focus.\n   *\n   * So let's read the component styles and then add `zIndex` to it.\n   */\n  const buttonStyles: SystemStyleObject = useMemo(() => {\n    // @ts-ignore\n    const _focus = { ...styles?.[\"_focus\"], zIndex: 1 }\n    return {\n      display: \"inline-flex\",\n      appearance: \"none\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      userSelect: \"none\",\n      position: \"relative\",\n      whiteSpace: \"nowrap\",\n      verticalAlign: \"middle\",\n      outline: \"none\",\n      ...styles,\n      ...(!!group && { _focus }),\n    }\n  }, [styles, group])\n\n  const { ref: _ref, type: defaultType } = useButtonType(as)\n\n  const contentProps = { rightIcon, leftIcon, iconSpacing, children }\n\n  return (\n    <chakra.button\n      ref={useMergeRefs(ref, _ref)}\n      as={as}\n      type={type ?? defaultType}\n      data-active={dataAttr(isActive)}\n      data-loading={dataAttr(isLoading)}\n      __css={buttonStyles}\n      className={cx(\"chakra-button\", className)}\n      {...rest}\n      disabled={isDisabled || isLoading}\n    >\n      {isLoading && spinnerPlacement === \"start\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--start\"\n          label={loadingText}\n          placement=\"start\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n\n      {isLoading ? (\n        loadingText || (\n          <chakra.span opacity={0}>\n            <ButtonContent {...contentProps} />\n          </chakra.span>\n        )\n      ) : (\n        <ButtonContent {...contentProps} />\n      )}\n\n      {isLoading && spinnerPlacement === \"end\" && (\n        <ButtonSpinner\n          className=\"chakra-button__spinner--end\"\n          label={loadingText}\n          placement=\"end\"\n          spacing={iconSpacing}\n        >\n          {spinner}\n        </ButtonSpinner>\n      )}\n    </chakra.button>\n  )\n})\n\nButton.displayName = \"Button\"\n\ntype ButtonContentProps = Pick<\n  ButtonProps,\n  \"leftIcon\" | \"rightIcon\" | \"children\" | \"iconSpacing\"\n>\n\nfunction ButtonContent(props: ButtonContentProps) {\n  const { leftIcon, rightIcon, children, iconSpacing } = props\n  return (\n    <>\n      {leftIcon && <ButtonIcon marginEnd={iconSpacing}>{leftIcon}</ButtonIcon>}\n      {children}\n      {rightIcon && (\n        <ButtonIcon marginStart={iconSpacing}>{rightIcon}</ButtonIcon>\n      )}\n    </>\n  )\n}\n","import { useCallback, useState } from \"react\"\n\nexport function useButtonType(value?: React.ElementType) {\n  const [isButton, setIsButton] = useState(!value)\n  const refCallback = useCallback((node: HTMLElement | null) => {\n    if (!node) return\n    setIsButton(node.tagName === \"BUTTON\")\n  }, [])\n  const type = isButton ? \"button\" : undefined\n  return { ref: refCallback, type } as const\n}\n","import { PropsOf, forwardRef } from \"@chakra-ui/system\"\n\nexport interface NativeImageOptions {\n  /**\n   * The native HTML `width` attribute to the passed to the `img`\n   */\n  htmlWidth?: string | number\n  /**\n   * The native HTML `height` attribute to the passed to the `img`\n   */\n  htmlHeight?: string | number\n}\n\ninterface NativeImageProps extends PropsOf<\"img\">, NativeImageOptions {}\n\nexport const NativeImage = forwardRef(function NativeImage(\n  props: NativeImageProps,\n  ref: React.Ref<any>,\n) {\n  const { htmlWidth, htmlHeight, alt, ...rest } = props\n  return (\n    <img width={htmlWidth} height={htmlHeight} ref={ref} alt={alt} {...rest} />\n  )\n})\n\nNativeImage.displayName = \"NativeImage\"\n","export function omit<T extends Record<string, any>, K extends keyof T>(\n  object: T,\n  keysToOmit: K[] = [],\n) {\n  const clone: Record<string, unknown> = Object.assign({}, object)\n  for (const key of keysToOmit) {\n    if (key in clone) {\n      delete clone[key as string]\n    }\n  }\n  return clone as Omit<T, K>\n}\n","import {\n  chakra,\n  SystemProps,\n  forwardRef,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\nimport { omit } from \"@chakra-ui/object-utils\"\nimport {\n  FallbackStrategy,\n  shouldShowFallbackImage,\n  useImage,\n  UseImageProps,\n} from \"./use-image\"\nimport { NativeImage, NativeImageOptions } from \"./native-image\"\n\ninterface ImageOptions extends NativeImageOptions {\n  /**\n   * Fallback image `src` to show if image is loading or image fails.\n   *\n   * Note 🚨: We recommend you use a local image\n   */\n  fallbackSrc?: string\n  /**\n   * Fallback element to show if image is loading or image fails.\n   * @type React.ReactElement\n   */\n  fallback?: React.ReactElement\n  /**\n   * Defines loading strategy\n   */\n  loading?: \"eager\" | \"lazy\"\n  /**\n   * How the image to fit within its bounds.\n   * It maps to css `object-fit` property.\n   * @type SystemProps[\"objectFit\"]\n   */\n  fit?: SystemProps[\"objectFit\"]\n  /**\n   * How to align the image within its bounds.\n   * It maps to css `object-position` property.\n   * @type SystemProps[\"objectPosition\"]\n   */\n  align?: SystemProps[\"objectPosition\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n\n  /**\n   * - beforeLoadOrError(default): loads the fallbackImage while loading the src\n   * - onError: loads the fallbackImage only if there is an error fetching the src\n   *\n   * @default \"beforeLoadOrError\"\n   * @see Issue https://github.com/chakra-ui/chakra-ui/issues/5581\n   */\n  fallbackStrategy?: FallbackStrategy\n  /**\n   * Defining which referrer is sent when fetching the resource.\n   * @type React.HTMLAttributeReferrerPolicy\n   */\n  referrerPolicy?: React.HTMLAttributeReferrerPolicy\n}\n\nexport interface ImageProps\n  extends UseImageProps,\n    Omit<HTMLChakraProps<\"img\">, keyof UseImageProps>,\n    ImageOptions {}\n\n/**\n * React component that renders an image with support\n * for fallbacks\n *\n * @see Docs https://chakra-ui.com/image\n */\nexport const Image = forwardRef<ImageProps, \"img\">(function Image(props, ref) {\n  const {\n    fallbackSrc,\n    fallback,\n    src,\n    srcSet,\n    align,\n    fit,\n    loading,\n    ignoreFallback,\n    crossOrigin,\n    fallbackStrategy = \"beforeLoadOrError\",\n    referrerPolicy,\n    ...rest\n  } = props\n\n  const providedFallback = fallbackSrc !== undefined || fallback !== undefined\n  /**\n   * Defer to native `img` tag if `loading` prop is passed\n   * @see https://github.com/chakra-ui/chakra-ui/issues/1027\n   *\n   * shouldIgnoreFallbackImage determines if we have the possibility to render a fallback image\n   */\n  const shouldIgnoreFallbackImage =\n    loading != null ||\n    // use can opt out of fallback image\n    ignoreFallback ||\n    // if the user doesn't provide any kind of fallback we should ignore it\n    !providedFallback\n\n  /**\n   * returns `loaded` if fallback is ignored\n   */\n  const status = useImage({\n    ...props,\n    crossOrigin,\n    ignoreFallback: shouldIgnoreFallbackImage,\n  })\n\n  const showFallbackImage = shouldShowFallbackImage(status, fallbackStrategy)\n\n  const shared = {\n    ref,\n    objectFit: fit,\n    objectPosition: align,\n    ...(shouldIgnoreFallbackImage ? rest : omit(rest, [\"onError\", \"onLoad\"])),\n  }\n\n  if (showFallbackImage) {\n    /**\n     * If user passed a custom fallback component,\n     * let's render it here.\n     */\n    if (fallback) return fallback\n\n    return (\n      <chakra.img\n        as={NativeImage}\n        className=\"chakra-image__placeholder\"\n        src={fallbackSrc}\n        {...shared}\n      />\n    )\n  }\n\n  return (\n    <chakra.img\n      as={NativeImage}\n      src={src}\n      srcSet={srcSet}\n      crossOrigin={crossOrigin}\n      loading={loading}\n      referrerPolicy={referrerPolicy}\n      className=\"chakra-image\"\n      {...shared}\n    />\n  )\n})\n\nImage.displayName = \"Image\"\n","import { useSafeLayoutEffect } from \"@chakra-ui/react-use-safe-layout-effect\"\nimport { useCallback, useEffect, useRef, useState } from \"react\"\n\ntype NativeImageProps = React.ImgHTMLAttributes<HTMLImageElement>\n\nexport interface UseImageProps {\n  /**\n   * The image `src` attribute\n   */\n  src?: string\n  /**\n   * The image `srcset` attribute\n   */\n  srcSet?: string\n  /**\n   * The image `sizes` attribute\n   */\n  sizes?: string\n  /**\n   * A callback for when the image `src` has been loaded\n   */\n  onLoad?: NativeImageProps[\"onLoad\"]\n  /**\n   * A callback for when there was an error loading the image `src`\n   */\n  onError?: NativeImageProps[\"onError\"]\n  /**\n   * If `true`, opt out of the `fallbackSrc` logic and use as `img`\n   *\n   * @default false\n   */\n  ignoreFallback?: boolean\n  /**\n   * The key used to set the crossOrigin on the HTMLImageElement into which the image will be loaded.\n   * This tells the browser to request cross-origin access when trying to download the image data.\n   */\n  crossOrigin?: NativeImageProps[\"crossOrigin\"]\n  loading?: NativeImageProps[\"loading\"]\n}\n\ntype Status = \"loading\" | \"failed\" | \"pending\" | \"loaded\"\n\nexport type FallbackStrategy = \"onError\" | \"beforeLoadOrError\"\n\ntype ImageEvent = React.SyntheticEvent<HTMLImageElement, Event>\n\n/**\n * React hook that loads an image in the browser,\n * and lets us know the `status` so we can show image\n * fallback if it is still `pending`\n *\n * @returns the status of the image loading progress\n *\n * @example\n *\n * ```jsx\n * function App(){\n *   const status = useImage({ src: \"image.png\" })\n *   return status === \"loaded\" ? <img src=\"image.png\" /> : <Placeholder />\n * }\n * ```\n */\nexport function useImage(props: UseImageProps) {\n  const {\n    loading,\n    src,\n    srcSet,\n    onLoad,\n    onError,\n    crossOrigin,\n    sizes,\n    ignoreFallback,\n  } = props\n\n  const [status, setStatus] = useState<Status>(\"pending\")\n\n  useEffect(() => {\n    setStatus(src ? \"loading\" : \"pending\")\n  }, [src])\n\n  const imageRef = useRef<HTMLImageElement | null>()\n\n  const load = useCallback(() => {\n    if (!src) return\n\n    flush()\n\n    const img = new Image()\n    img.src = src\n    if (crossOrigin) img.crossOrigin = crossOrigin\n    if (srcSet) img.srcset = srcSet\n    if (sizes) img.sizes = sizes\n    if (loading) img.loading = loading\n\n    img.onload = (event) => {\n      flush()\n      setStatus(\"loaded\")\n      onLoad?.(event as unknown as ImageEvent)\n    }\n    img.onerror = (error) => {\n      flush()\n      setStatus(\"failed\")\n      onError?.(error as any)\n    }\n\n    imageRef.current = img\n  }, [src, crossOrigin, srcSet, sizes, onLoad, onError, loading])\n\n  const flush = () => {\n    if (imageRef.current) {\n      imageRef.current.onload = null\n      imageRef.current.onerror = null\n      imageRef.current = null\n    }\n  }\n\n  useSafeLayoutEffect(() => {\n    /**\n     * If user opts out of the fallback/placeholder\n     * logic, let's bail out.\n     */\n    if (ignoreFallback) return undefined\n\n    if (status === \"loading\") {\n      load()\n    }\n    return () => {\n      flush()\n    }\n  }, [status, load, ignoreFallback])\n\n  /**\n   * If user opts out of the fallback/placeholder\n   * logic, let's just return 'loaded'\n   */\n  return ignoreFallback ? \"loaded\" : status\n}\n\nexport const shouldShowFallbackImage = (\n  status: Status,\n  fallbackStrategy: FallbackStrategy,\n) =>\n  (status !== \"loaded\" && fallbackStrategy === \"beforeLoadOrError\") ||\n  (status === \"failed\" && fallbackStrategy === \"onError\")\n\nexport type UseImageReturn = ReturnType<typeof useImage>\n","import {\n  chakra,\n  forwardRef,\n  SystemProps,\n  HTMLChakraProps,\n} from \"@chakra-ui/system\"\n\nexport interface FlexOptions {\n  /**\n   * Shorthand for `alignItems` style prop\n   * @type SystemProps[\"alignItems\"]\n   */\n  align?: SystemProps[\"alignItems\"]\n\n  /**\n   * Shorthand for `justifyContent` style prop\n   * @type SystemProps[\"justifyContent\"]\n   */\n  justify?: SystemProps[\"justifyContent\"]\n\n  /**\n   * Shorthand for `flexWrap` style prop\n   * @type SystemProps[\"flexWrap\"]\n   */\n  wrap?: SystemProps[\"flexWrap\"]\n\n  /**\n   * Shorthand for `flexDirection` style prop\n   * @type SystemProps[\"flexDirection\"]\n   * @default \"row\"\n   */\n  direction?: SystemProps[\"flexDirection\"]\n\n  /**\n   * Shorthand for `flexBasis` style prop\n   * @type SystemProps[\"flexBasis\"]\n   */\n  basis?: SystemProps[\"flexBasis\"]\n\n  /**\n   * Shorthand for `flexGrow` style prop\n   * @type SystemProps[\"flexGrow\"]\n   */\n  grow?: SystemProps[\"flexGrow\"]\n\n  /**\n   * Shorthand for `flexShrink` style prop\n   * @type SystemProps[\"flexShrink\"]\n   */\n  shrink?: SystemProps[\"flexShrink\"]\n}\n\nexport interface FlexProps extends HTMLChakraProps<\"div\">, FlexOptions {}\n\n/**\n * React component used to create flexbox layouts.\n *\n * It renders a `div` with `display: flex` and\n * comes with helpful style shorthand.\n *\n * @see Docs https://chakra-ui.com/flex\n */\nexport const Flex = forwardRef<FlexProps, \"div\">(function Flex(props, ref) {\n  const { direction, align, justify, wrap, basis, grow, shrink, ...rest } =\n    props\n\n  const styles = {\n    display: \"flex\",\n    flexDirection: direction,\n    alignItems: align,\n    justifyContent: justify,\n    flexWrap: wrap,\n    flexBasis: basis,\n    flexGrow: grow,\n    flexShrink: shrink,\n  }\n\n  return <chakra.div ref={ref} __css={styles} {...rest} />\n})\n\nFlex.displayName = \"Flex\"\n","import { useMemo } from \"react\"\n\nexport type ReactRef<T> = React.RefCallback<T> | React.MutableRefObject<T>\n\nexport function assignRef<T = any>(\n  ref: ReactRef<T> | null | undefined,\n  value: T,\n) {\n  if (ref == null) return\n\n  if (typeof ref === \"function\") {\n    ref(value)\n    return\n  }\n\n  try {\n    ref.current = value\n  } catch (error) {\n    throw new Error(`Cannot assign value '${value}' to ref '${ref}'`)\n  }\n}\n\nexport function mergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  return (node: T | null) => {\n    refs.forEach((ref) => {\n      assignRef(ref, node)\n    })\n  }\n}\n\nexport function useMergeRefs<T>(...refs: (ReactRef<T> | null | undefined)[]) {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return useMemo(() => mergeRefs(...refs), refs)\n}\n"],"names":["NotFound","navigate","useNavigate","_jsx","Flex","display","justifyContent","alignItems","width","children","_jsxs","Box","flexDirection","backgroundColor","padding","Image","src","loading","alt","Text","fontSize","textAlign","Button","margin","onClick","ButtonGroupProvider","useButtonGroup","createContext","strict","name","ButtonIcon","props","className","rest","_children","isValidElement","cloneElement","focusable","_className","cx","jsx","chakra","span","alignSelf","flexShrink","displayName","ButtonSpinner","label","placement","spacing","Spinner","color","height","__css","marginProp","spinnerStyles","useMemo","position","lineHeight","div","forwardRef","ref","group","styles","useStyleConfig","isDisabled","isLoading","isActive","leftIcon","rightIcon","loadingText","iconSpacing","type","spinner","spinnerPlacement","as","omitThemingProps","buttonStyles","_focus","zIndex","appearance","userSelect","whiteSpace","verticalAlign","outline","_ref","defaultType","value","isButton","setIsButton","useState","useCallback","node","tagName","useButtonType","contentProps","jsxs","button","useMergeRefs","dataAttr","disabled","opacity","ButtonContent","Fragment","marginEnd","marginStart","NativeImage","htmlWidth","htmlHeight","omit","object","keysToOmit","arguments","length","undefined","clone","Object","assign","key","fallbackSrc","fallback","srcSet","align","fit","ignoreFallback","crossOrigin","fallbackStrategy","referrerPolicy","shouldIgnoreFallbackImage","status","useImage","showFallbackImage","shouldShowFallbackImage","shared","objectFit","objectPosition","img","onLoad","onError","sizes","setStatus","useEffect","imageRef","useRef","load","flush","srcset","onload","event","onerror","error","current","useSafeLayoutEffect","direction","justify","wrap","basis","grow","shrink","flexWrap","flexBasis","flexGrow","mergeRefs","_len","refs","Array","_key","forEach","Error","concat","assignRef","_len2","_key2"],"sourceRoot":""}