{"version":3,"file":"static/js/915.d4e0dd0d.chunk.js","mappings":"0KA6EO,SAASA,EAAiBC,GAC/B,MAAMC,GAAYC,EAAAA,EAAAA,QAAO,OACnB,KAAEC,IAASC,EAAAA,EAAAA,KA2BjB,OAzBAC,EAAAA,EAAAA,YAAU,KACR,GAAIJ,EAAUK,QACZ,OAGF,MAAMC,GAAYC,EAAAA,EAAAA,IAAG,IAAK,CACxBC,MAAO,CAAET,WAaX,OAVAO,EAAUG,GAAG,WAAW,KACtB,MAAMC,EAAY,OAAJR,QAAI,IAAJA,OAAI,EAAJA,EAAMQ,MAEpBJ,EAAUK,KAAK,gBAAiB,CAAED,SAAQ,IAG5CJ,EAAUG,GAAG,cAAc,SAE3BT,EAAUK,QAAUC,EAEb,KACLA,EAAUM,aACVZ,EAAUK,QAAU,IAAI,CACzB,GACA,CAACN,EAAW,OAAJG,QAAI,IAAJA,OAAI,EAAJA,EAAMQ,QAEVV,EAAUK,OACnB,CACOQ,eAAeC,EAAiBC,EAAQC,EAAad,EAAMe,GAChE,GAAKD,EAGL,IACE,MAAME,EAAS,CACbC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAADC,OAAYnB,EAAKH,UAG5B,KAAEuB,SAAeC,EAAAA,EAAMC,KAAK,kCAADH,OACGnB,EAAKuB,IAAG,YAAAJ,OAAWN,GACrD,CAAEC,eACFE,GAGEI,GACFL,EAAM,CACJS,MAAO,2DACPC,OAAQ,OACRC,SAAU,IACVC,SAAU,UAGhB,CAAE,MAAOC,GAAQ,CACnB,C,+UCjHA,MA2IA,EA3IiBC,KACf,MAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,IAAYC,EAAAA,EAAAA,MAC7BC,EAAcC,IAAmBC,EAAAA,EAAAA,UAAS,KAC1CC,EAASC,IAAcF,EAAAA,EAAAA,WAAS,IACjC,KAAEpC,IAASC,EAAAA,EAAAA,KACXsC,GAAWC,EAAAA,EAAAA,MAEXC,GAAoBC,EAAAA,EAAAA,cAAY/B,UACpC,GAAKX,EAIL,IACE,MAAMgB,EAAS,CACbC,QAAS,CACPC,cAAc,UAADC,OAAYnB,EAAKH,UAI5B,KAAEuB,SAAeC,EAAAA,EAAMsB,IAAI,+BAADxB,OACCnB,EAAKuB,KACpCP,GAEFmB,EAAgBf,EAClB,CAAE,MAAOQ,GACPgB,QAAQhB,MAAM,gCAAiCA,EACjD,IACC,CAAC5B,KAEJE,EAAAA,EAAAA,YAAU,KACJF,GACFyC,GACF,GACC,CAACzC,EAAMyC,IAyBV,OACEI,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAACG,EAAAA,EAAM,CACLC,gBAAiB,QACjBC,OAAQ,CAAED,gBAAiB,eAC3BE,QAASpB,EAAOgB,SAAA,EAEhBK,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CACJC,IAAI,2FACJC,OAAQ,IAETrB,GAAgBA,EAAasB,OAAS,IACrCJ,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CACH9B,SAAS,WACT+B,OAAO,MACPC,MAAM,MACNC,UAAU,oBACVC,GAAG,UACHC,aAAa,MACbC,MAAM,MACNR,OAAO,MACPS,EAAG,OAGPZ,EAAAA,EAAAA,KAACK,EAAAA,EAAI,QAGPZ,EAAAA,EAAAA,MAACoB,EAAAA,GAAK,CAACnC,OAAQA,EAAQE,QAASA,EAAQe,SAAA,EACxCK,EAAAA,EAAAA,KAACc,EAAAA,EAAY,CACbL,GAAG,iBACHM,eAAe,kCAEbtB,EAAAA,EAAAA,MAACuB,EAAAA,EAAY,CAAArB,SAAA,EACXK,EAAAA,EAAAA,KAACiB,EAAAA,EAAW,CAACC,UAAW,SAASvB,SAAC,oBAClCK,EAAAA,EAAAA,KAACmB,EAAAA,EAAgB,KACjBnB,EAAAA,EAAAA,KAACoB,EAAAA,EAAS,CACRC,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZC,QAAS,SACTC,KAAM,QAAQ9B,SAEbb,GAAgBA,EAAasB,OAAS,EACrCtB,EAAa4C,KAAI,CAACC,EAAMC,KACtBnC,EAAAA,EAAAA,MAACoC,EAAAA,GAAG,CACFR,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZZ,MAAO,OAAOhB,SAAA,EAGdF,EAAAA,EAAAA,MAACG,EAAAA,EAAM,CAEL0B,eAAgB,gBAChBvB,QAASA,IAAMZ,EAAS,aAADpB,OAAc4D,EAAKxD,MAAOwB,SAAA,CAEhDiC,EAAQ,EAAE,gBAAcD,EAAKG,OAJzBH,EAAKxD,MAMZ6B,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACLmC,WAAY,UACZhC,QAASA,IAnFJxC,WACrB,GAAKX,GAASoF,EAAd,CAGA9C,GAAW,GACX,IACE,MAAMtB,EAAS,CACbC,QAAS,CACPC,cAAc,UAADC,OAAYnB,EAAKH,UAI5B,KAAEuB,SAAeC,EAAAA,EAAMsB,IAAI,8BAADxB,OACAiE,EAAM,KAAAjE,OAAInB,EAAKuB,KAC7CP,GAEFmB,EAAgBf,GAChBkB,GAAW,EACb,CAAE,MAAOV,GACPU,GAAW,GACXM,QAAQhB,MAAM,wCAAyCA,EACzD,CAlBA,CAkBA,EA8D+ByD,CAAeN,EAAKxD,KAAKwB,SAEvCV,GAAUe,EAAAA,EAAAA,KAACkC,EAAAA,EAAO,CAACC,KAAM,UAAW,cAblCP,MAkBT5B,EAAAA,EAAAA,KAAAN,EAAAA,SAAA,CAAAC,UACEK,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAAAV,SAAC,iDAKZK,EAAAA,EAAAA,KAACoC,EAAAA,EAAW,CAACC,SAAU,QAASC,UAAW,YAAY3C,SAAC,sDAK3D,EC+GP,QAnPA,WACE,MAAM,KAAE/C,EAAI,aAAE2F,EAAY,gBAAEC,IAAoB3F,EAAAA,EAAAA,MAC1C,OAAE6B,EAAM,OAAEC,EAAM,QAAEC,IAAYC,EAAAA,EAAAA,KAC9BM,GAAWC,EAAAA,EAAAA,MAQXqD,GAAeC,EAAAA,EAAAA,GAAmB,CAAEC,KAAM,OAAQC,GAAI,SAEtDC,GAAiBH,EAAAA,EAAAA,GAAmB,CACxCC,KAAM,SACNC,GAAI,YAGN,OACEnD,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEF,EAAAA,EAAAA,MAACoC,EAAAA,GAAG,CACFR,QAAS,OACTC,eAAe,gBACfC,WAAW,SACXd,GAAG,QACHqC,EAAE,OACFlC,EAAG,EACHmC,cAAe,EACfC,UAAU,MACVC,OAAQ,GACRC,IAAK,EACL3E,SAAU,QAAQoB,SAAA,EAElBK,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CACHa,UAAW,SACXmB,SAAU,CAAEM,KAAM,QAASC,GAAI,UAC/BO,WAAY,OACZC,WAAY,OACZxC,EAAG,EACHyC,EAAG,EACHC,GAAI,EAAE3D,SACP,gBAGDF,EAAAA,EAAAA,MAACoC,EAAAA,GAAG,CAACR,QAAS,OAAQC,eAAgB,SAAUC,WAAY,SAAS5B,SAAA,EACnEK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACLC,gBAAiB,cACjBwB,QAASoB,EACTc,WAAYV,EACZ/C,OAAQ,CAAED,gBAAiB,cAAe2D,MAAO,aACjDzD,QAASA,KACPZ,EAAS,aAAa,EACtBQ,SACH,iBAGDK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACL6D,QAAQ,QACR1D,QAASpB,EACTmB,OAAQ,CAAED,gBAAiB,cAAe2D,MAAO,aAAc7D,UAE/DK,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CACHgB,QAAS,CAAEsB,KAAM,OAAQC,GAAI,QAC7Bc,GAAI,EACJN,WAAY,OAAOzD,SACpB,gBAIHK,EAAAA,EAAAA,KAACvB,EAAQ,QAGXgB,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEF,EAAAA,EAAAA,MAACkE,EAAAA,EAAI,CAAAhE,SAAA,EACHF,EAAAA,EAAAA,MAACmE,EAAAA,EAAU,CAAChD,EAAG,EAAGrC,SAAS,WAAUoB,SAAA,EACnCK,EAAAA,EAAAA,KAAC6D,EAAAA,EAAQ,CAACxB,SAAS,MAAMzB,EAAG,EAAGyC,EAAG,IACjCd,EAAanC,OAAS,IACrBJ,EAAAA,EAAAA,KAAC8D,EAAAA,EAAK,CACJL,QAAQ,SACRlF,SAAS,WACT2E,IAAI,OACJ3C,MAAM,OACNV,gBAAiB,MACjBoD,OAAQ,EACRvC,aAAc,MACd8C,MAAM,QAAO7D,SAEZ4C,EAAanC,aAIpBX,EAAAA,EAAAA,MAACsE,EAAAA,EAAQ,CAACT,GAAI,EAAE3D,SAAA,EACZ4C,EAAanC,QAAU,kBACxBmC,EAAab,KAAKsC,IACjBhE,EAAAA,EAAAA,KAACiE,EAAAA,EAAQ,CAEPlE,QAASA,KACPyC,EAAgBD,EAAa2B,QAAQC,GAAMA,IAAMH,IAAO,EACxDrE,SAAA,oBAAA5B,OAGAiG,EAAMI,OAASJ,EAAMI,OAAOtC,KAAO,QAAO,UAAA/D,OACnCiG,EAAMI,OAASJ,EAAMI,OAAOC,UAAY,MAP5CL,EAAM7F,cAYnB6B,EAAAA,EAAAA,KAAC2D,EAAAA,EAAI,CAAAhE,UACHK,EAAAA,EAAAA,KAAC4D,EAAAA,EAAU,CACTU,GAAI1E,EAAAA,EACJa,GAAG,QACHX,OAAQ,CAAED,gBAAiB,eAC3BE,QAASpB,EAAOgB,SAEE,SAAjB8C,GACCzC,EAAAA,EAAAA,KAACuE,EAAAA,EAAM,CACLpC,KAAK,KACLqC,OAAO,UACP1C,KAAU,OAAJlF,QAAI,IAAJA,OAAI,EAAJA,EAAMkF,KACZ5B,IAAS,OAAJtD,QAAI,IAAJA,OAAI,EAAJA,EAAM6H,OAGbzE,EAAAA,EAAAA,KAAC0E,EAAAA,EAAU,CACT7E,gBAAiB,cACjB8E,MACE3E,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CACJC,IAAI,0FACJC,OAAQ,iBAUxBV,EAAAA,EAAAA,MAACmF,EAAAA,EAAM,CAACC,UAAU,OAAOjG,QAASA,EAASF,OAAQA,EAAOiB,SAAA,EAC1DK,EAAAA,EAAAA,KAAC8E,EAAAA,EAAa,CACdrE,GAAG,iBACHM,eAAe,kCAEbtB,EAAAA,EAAAA,MAACsF,EAAAA,EAAa,CAAApF,SAAA,EACZF,EAAAA,EAAAA,MAACuF,EAAAA,EAAY,CACXC,kBAAkB,MAClB5D,QAAS,OACTC,eAAgB,gBAAgB3B,SAAA,CACjC,aAECK,EAAAA,EAAAA,KAACkF,EAAAA,EAAW,CAACnF,QAASnB,QAExBa,EAAAA,EAAAA,MAAC0F,EAAAA,EAAU,CACT9D,QAAS,OACTG,QAAS,SACTF,eAAgB,gBAChBX,MAAO,OAAOhB,SAAA,EAEdF,EAAAA,EAAAA,MAACoC,EAAAA,GAAG,CACFuD,QAAS,EACT/D,QAAS,OACTC,eAAgB,eAChBE,QAAS,SAAS7B,SAAA,EAElBF,EAAAA,EAAAA,MAACG,EAAAA,EAAM,CACLyB,QAAS,OACTC,eAAgB,OAChBC,WAAY,SACZQ,WAAY,QACZsB,EAAG,EACHvD,OAAQ,CAAED,gBAAiB,cAAe2D,MAAO,SACjDzD,QAASA,IAAMZ,EAAS,YAAYQ,SAAA,EAEpCK,EAAAA,EAAAA,KAACuE,EAAAA,EAAM,CACLpC,KAAK,KACLqC,OAAO,UACP1C,KAAU,OAAJlF,QAAI,IAAJA,OAAI,EAAJA,EAAMkF,KACZ5B,IAAS,OAAJtD,QAAI,IAAJA,OAAI,EAAJA,EAAM6H,OAEbzE,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAACO,EAAG,EAAGyC,EAAG,EAAE1D,SAAC,gBAIpBK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACL0B,eAAgB,OAChBS,WAAY,QACZjC,OAAQ,CAAED,gBAAiB,cAAe2D,MAAO,SACjDzD,QAASA,KACPZ,EAAS,cACTP,GAAS,EACTe,SACH,iBAGDK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACL0B,eAAgB,QAChBS,WAAY,QACZjC,OAAQ,CAAED,gBAAiB,cAAe2D,MAAO,SACjDzD,QAASA,KACPZ,EAAS,UACTP,GAAS,EACTe,SACH,WAGDK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACL0B,eAAgB,OAChBS,WAAY,QACZjC,OAAQ,CAAED,gBAAiB,cAAe2D,MAAO,SACjD6B,aAAiB,OAAJzI,QAAI,IAAJA,GAAAA,EAAM0I,WACnBvF,QAASA,KACPZ,EAAS,aACTP,GAAS,EACTe,SACH,sBAGDK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACLmC,WAAY,QACZT,eAAgB,OAChBxB,OAAQ,CAAED,gBAAiB,cAAe2D,MAAO,SACjDzD,QAASA,KACPZ,EAAS,aACTP,GAAS,EACTe,SACH,oBAGDK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACLmC,WAAY,QACZT,eAAgB,OAChBxB,OAAQ,CAAED,gBAAiB,cAAe2D,MAAO,SAAU7D,SAC5D,mCAIHK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CAACG,QAtOIwF,KACpBC,aAAaC,WAAW,YACxBjD,EAAgB,IAChBrD,EAAS,IAAI,EAmO0BQ,SAAC,uBAM5C,C,kQCrPO,MAAM+F,EAAmBC,IAAkB,IAAjB,QAAE/G,GAAS+G,EAC1C,MAAM,KAAE/I,EAAI,KAAE+E,EAAI,QAAEiE,EAAO,YAAEC,EAAW,QAAEC,IAAYjJ,EAAAA,EAAAA,MAC/CiF,EAAMiE,IAAW/G,EAAAA,EAAAA,UAAS,OAC1BgH,EAAiBC,IAAsBjH,EAAAA,EAAAA,UAAa,OAAJpC,QAAI,IAAJA,OAAI,EAAJA,EAAMsJ,UACtDC,EAAWC,IAAgBpH,EAAAA,EAAAA,UAASpC,EAAK0I,YACzCe,EAAaC,IAAkBtH,EAAAA,EAAAA,UAAS,KACxCuH,EAAWC,IAAgBxH,EAAAA,EAAAA,UAAS,KACpCyH,EAAWC,IAAgB1H,EAAAA,EAAAA,UAAS,KACpC2H,EAAcC,IAAmB5H,EAAAA,EAAAA,UAAS,KAC1C6H,EAASC,IAAc9H,EAAAA,EAAAA,UAAS,IACjCG,GAAWC,EAAAA,EAAAA,MACXzB,GAAQoJ,EAAAA,EAAAA,KAERC,GAASxK,EAAAA,EAAAA,IAAqB,OAAJI,QAAI,IAAJA,OAAI,EAAJA,EAAMH,QAEtCK,EAAAA,EAAAA,YAAU,KACJkK,GACFA,EAAO7J,GAAG,gBAAiBwE,IACzBmE,GAASmB,IAAQ,IACZA,EACHnI,aAAc,IAAImI,EAASnI,aAAc6C,EAAKxD,SAGhD0H,GAAaqB,IAAI,IAAWA,EAAMvF,UAAQ,GAE9C,GACC,CAACqF,EAAQnB,EAAaC,IAEzB,MAAMqB,EAAiBC,OAAOC,QAAQC,EAAAA,IAAW5F,KAAI6F,IAAA,IAAEC,EAAMtB,GAAQqB,EAAA,MAAM,CACzEE,MAAOvB,EAAQpE,KACf4F,MAAOxB,EAAQpE,KAChB,IAEK6F,GAAqBrI,EAAAA,EAAAA,cAAY/B,UACrC,GAAKX,EAIL,IACE,MAAMgB,EAAS,CACbC,QAAS,CACPC,cAAc,UAADC,OAAgB,OAAJnB,QAAI,IAAJA,OAAI,EAAJA,EAAMH,UAI7B,KAAEuB,SAAeC,EAAAA,EAAMsB,IAAI,aAADxB,OACjBnB,EAAKsJ,QAAO,KAAAnI,OAAIoI,GAC7BvI,GAGFkJ,EAAW9I,EACb,CAAE,MAAOQ,GACPgB,QAAQhB,MAAM,sCAAuCA,EACvD,MAlBEW,EAAS,aAkBX,GACC,CAACvC,EAAKH,MAAOG,EAAKuB,IAAK2I,EAAYX,KAEtCrJ,EAAAA,EAAAA,YAAU,KACHF,EAIL+K,IAHExI,EAAS,aAGS,GACnB,CAACwI,EAAoBxI,EAAUvC,KAElCE,EAAAA,EAAAA,YAAU,KACHF,GAAMuC,EAAS,cAEM5B,WACxB,MAAMqK,GAASC,EAAAA,EAAAA,GAAmB7B,GAClCY,EAAgBgB,EAAO,EAGzBE,EAAmB,GAClB,CAAClL,IAEJ,MAIMmL,GAAqBzI,EAAAA,EAAAA,cACzB/B,MAAOyK,EAAQC,KAIb,GAHIA,GACFA,EAAMC,iBAEHpG,EAML,GAAKlF,EAIL,IACE,MAAMgB,EAAS,CACbC,QAAS,CACPC,cAAc,UAADC,OAAYnB,EAAKH,UAI5B,KAAEuB,SAAeC,EAAAA,EAAMsB,IAAI,aAADxB,OACjBnB,EAAKsJ,QAAO,KAAAnI,OAAInB,EAAK0I,UAAS,KAAAvH,OAAI+D,EAAI,KAAA/D,OAAIiK,GACvDpK,GAEFgI,EAAQ5H,EACV,CAAE,MAAOQ,GACPgB,QAAQhB,MAAM,uBAAwBA,EACxC,MAjBEW,EAAS,mBANTxB,EAAM,CACJS,MAAO,gCAsBX,GAEF,CAACxB,EAAKH,MAAOG,EAAKuB,IAAKyH,IAuBzB,OACEnG,EAAAA,EAAAA,MAAC0I,EAAAA,EAAM,CACLtI,gBAAiB,aACjBc,MAAO,OACPqC,UAAU,UACVpC,EAAE,IACFwH,QAAQ,KACR3H,GAAG,QAAOd,SAAA,EAEVF,EAAAA,EAAAA,MAACoC,EAAAA,GAAG,CACFR,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZc,SAAU,QACV1B,MAAO,OACP0H,GAAI,GAAG1I,SAAA,EAEPK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CAACyC,SAAU,UAAWtC,QA3EXuI,KACtB1J,GAAS,EA0EkD+B,MAAO,OAAOhB,SAAC,OAGtEK,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAAC8C,WAAY,OAAQE,EAAG,EAAE1D,SAAC,eAGhCF,EAAAA,EAAAA,MAACY,EAAAA,EAAI,CACHgC,SAAU,KACVc,WAAY,IACZ1C,IAAI8H,EAAAA,EAAAA,IAAkB,WAAY,aAClC3H,EAAG,EACH8C,GAAI,EACJF,MAAO,YACP4E,QAAS,OAAOzI,SAAA,CACjB,YACWgC,GAAQA,EAAK6G,aAAe,aAAe,iBAAiB,WAI1E/I,EAAAA,EAAAA,MAACoC,EAAAA,GAAG,CACFwB,EAAG,EACHzC,EAAG,EACHF,aAAc,EACdC,MAAO,CAAEgC,KAAM,MAAOC,GAAI,OAC1B6F,OAAQ,oBAAoB9I,SAAA,EAE5BF,EAAAA,EAAAA,MAACiJ,EAAAA,GAAW,CAACC,GAAG,aAAaC,YAAU,EAAAjJ,SAAA,EACrCK,EAAAA,EAAAA,KAAC6I,EAAAA,EAAS,CAACC,UAAW,UAAUnJ,SAAC,eACjCK,EAAAA,EAAAA,KAAC+I,EAAAA,EAAK,CACJC,YAAY,kBACZvB,MAAO3F,GAASH,GAAQA,EAAKG,MAAS,GACtCmH,SAAWC,GAAMnD,EAAQmD,EAAEC,OAAO1B,aAGtChI,EAAAA,EAAAA,MAACiJ,EAAAA,GAAW,CAACC,GAAG,UAAUC,YAAU,EAAAjJ,SAAA,EAClCK,EAAAA,EAAAA,KAAC6I,EAAAA,EAAS,CAACC,UAAU,UAASnJ,SAAC,aAC/BK,EAAAA,EAAAA,KAACoJ,EAAAA,EAAM,CACLJ,YAAY,sBACZ3H,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZZ,MAAO,OACP8G,MAAW,OAAJ7K,QAAI,IAAJA,OAAI,EAAJA,EAAMsJ,QACbb,YAAY,EACZ4D,SAAWC,GAAMjD,EAAmBiD,EAAEC,OAAO1B,OAAO9H,SAEnDwH,EAAezF,KAAK2H,IACnBrJ,EAAAA,EAAAA,KAAA,UAEEyH,MAAO4B,EAAO5B,MACd6B,MAAO,CAAE9F,MAAO,SAAU7D,SAEzB0J,EAAO3B,OAJH2B,EAAO5B,cASnBzB,GAAmBW,GAClBlH,EAAAA,EAAAA,MAACiJ,EAAAA,GAAW,CAACC,GAAG,YAAYC,YAAU,EAAAjJ,SAAA,EACpCK,EAAAA,EAAAA,KAAC6I,EAAAA,EAAS,CAACC,UAAW,UAAUnJ,SAAC,qBACjCK,EAAAA,EAAAA,KAACoJ,EAAAA,EAAM,CACLJ,YAAY,uBACZ3H,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZZ,MAAO,OACP8G,MAAOtB,EACPd,YAAY,EACZ4D,SAAWC,GAAM9C,EAAa8C,EAAEC,OAAO1B,OAAO9H,SAE7CgH,GACCA,EAAajF,KAAK6H,IAChBvJ,EAAAA,EAAAA,KAAA,UAEEyH,MAAO8B,EAAY9B,MACnB6B,MAAO,CAAE9F,MAAO,SAAU7D,SAEzB4J,EAAYzH,MAJRyH,EAAY9B,eAU3BhI,EAAAA,EAAAA,MAACiJ,EAAAA,GAAW,CAACC,GAAG,YAAYC,YAAU,EAAAjJ,SAAA,EACpCK,EAAAA,EAAAA,KAAC6I,EAAAA,EAAS,CAACC,UAAW,UAAUnJ,SAAC,qBACjCK,EAAAA,EAAAA,KAAC+I,EAAAA,EAAK,CACJS,KAAK,OACLR,YAAY,WACZC,SAAWC,GAAM9C,EAAa8C,EAAEC,OAAO1B,aAI7CzH,EAAAA,EAAAA,KAAC0I,EAAAA,GAAW,CAACC,GAAG,aAAaC,YAAU,EAAAjJ,UACrCK,EAAAA,EAAAA,KAAC6I,EAAAA,EAAS,CAACC,UAAW,UAAUnJ,SAAC,4CAInCF,EAAAA,EAAAA,MAACoC,EAAAA,GAAG,CACFR,QAAS,OACTG,QAAS,SACTF,eAAgB,SAChBC,WAAY,SACZb,aAAc,EACdC,MAAO,OACPR,OAAQ,QACRsJ,SAAS,OAAM9J,SAAA,EAEbkH,IACA7G,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAACa,UAAW,SAASvB,SAAC,8CAI5BkH,EAAQzG,OAAS,GAChByG,EAAQnF,KAAKgI,IACXjK,EAAAA,EAAAA,MAACoC,EAAAA,GAAG,CACFR,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SAEZ+H,MAAO,CAAE9F,MAAO,SAChB7C,MAAO,MACP0C,EAAG,EAAE1D,SAAA,EAELF,EAAAA,EAAAA,MAACY,EAAAA,EAAI,CAACgC,SAAU,QAASc,WAAY,OAAOxD,SAAA,CAAC,SACpC+J,EAAW5H,KAAK,UAAQ4H,EAAWrF,cAE5CrE,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACLc,aAAc,GACd2E,WACE1D,GAAQA,EAAK7C,aAAa6K,SAASD,EAAWvL,KAEhD4B,QAAUkI,GAAUF,EAAmB2B,EAAWvL,IAAK8J,GACvDpI,gBAAiB,UAAUF,SAE1BgC,GAAQA,EAAK7C,aAAa6K,SAASD,EAAWvL,KAC3C,eACA,mBAlBDuL,EAAWvL,WAuBxBsB,EAAAA,EAAAA,MAACiJ,EAAAA,GAAW,CAACC,GAAG,UAAUC,YAAU,EAAAjJ,SAAA,EAClCF,EAAAA,EAAAA,MAACoJ,EAAAA,EAAS,CAACC,UAAW,UAAUnJ,SAAA,CAAC,qBACZgC,GAAQA,EAAKiI,QAAQxJ,OAAO,UAEjDX,EAAAA,EAAAA,MAACoC,EAAAA,GAAG,CACFR,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZb,aAAc,EACdC,MAAO,OACPR,OAAQ,QACRsJ,SAAS,OACTI,UAAW,oBACXC,aAAc,oBAAoBnK,SAAA,CAEjCgC,GAAgC,IAAxBA,EAAKiI,QAAQxJ,SACpBJ,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAACa,UAAW,SAASvB,SAAC,wCAI5BgC,GACCA,EAAKiI,QAAQxJ,OAAS,GACtBuB,EAAKiI,QAAQlI,KAAKqI,IAChBtK,EAAAA,EAAAA,MAACG,EAAAA,EAAM,CAACyC,SAAU,QAASc,WAAY,OAAQE,EAAG,EAAE1D,SAAA,CAAC,QAC7CoK,EAAO1F,sBAKvB5E,EAAAA,EAAAA,MAACiJ,EAAAA,GAAW,CAACC,GAAG,WAAWC,YAAU,EAAAjJ,SAAA,EACnCK,EAAAA,EAAAA,KAAC6I,EAAAA,EAAS,CAAAlJ,SAAC,iBACXK,EAAAA,EAAAA,KAAC+I,EAAAA,EAAK,CACJS,KAAK,OACL1H,KAAK,WACL2F,MAAOpB,EACP4C,SAAWC,GAAM5C,EAAe4C,EAAEC,OAAO9C,aACzC2C,YAAY,+BACZgB,YACO,OAAJrI,QAAI,IAAJA,GAAAA,EAAMiI,QAAQK,MAAMC,GAAQA,EAAI7F,YAAcgC,WAIrD5G,EAAAA,EAAAA,MAACiJ,EAAAA,GAAW,CAACC,GAAG,YAAYC,YAAU,EAAAjJ,SAAA,EACpCK,EAAAA,EAAAA,KAAC6I,EAAAA,EAAS,CAAAlJ,SAAC,eACXK,EAAAA,EAAAA,KAAC+I,EAAAA,EAAK,CACJS,KAAK,OACL1H,KAAK,YACL2F,MAAOhB,EACPuC,YAAY,+BACZgB,YACO,OAAJrI,QAAI,IAAJA,GAAAA,EAAMiI,QAAQK,MAAMC,GAAQA,EAAI7F,YAAcoC,KAEjDwC,SAAWC,GAAMxC,EAAawC,EAAEC,OAAO1C,iBAG3ChH,EAAAA,EAAAA,MAACiJ,EAAAA,GAAW,CAACC,GAAG,gBAAgBC,YAAU,EAAAjJ,SAAA,EACxCK,EAAAA,EAAAA,KAAC6I,EAAAA,EAAS,CAAAlJ,SAAC,sBACXK,EAAAA,EAAAA,KAAC+I,EAAAA,EAAK,CACJS,KAAK,OACL1H,KAAK,eACL2F,MAAOlB,EACPyC,YAAY,+BACZgB,YACO,OAAJrI,QAAI,IAAJA,GAAAA,EAAMiI,QAAQK,MAAMC,GAAQA,EAAI7F,YAAckC,KAEjD0C,SAAWC,GAAM1C,EAAa0C,EAAEC,OAAO5C,iBAG3C9G,EAAAA,EAAAA,MAACiJ,EAAAA,GAAW,CAACC,GAAG,mBAAkBhJ,SAAA,EAChCK,EAAAA,EAAAA,KAAC6I,EAAAA,EAAS,CAAAlJ,SAAC,WACXK,EAAAA,EAAAA,KAAC+I,EAAAA,EAAK,CACJS,KAAK,OACL1H,KAAK,kBACL2F,MAAW,OAAJ7K,QAAI,IAAJA,OAAI,EAAJA,EAAMyH,UACbgB,YAAY,QAGhBrF,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACLuK,YAAY,OACZxJ,MAAM,OACN2I,MAAO,CAAEc,UAAW,IACpB/E,YACM,OAAJ1D,QAAI,IAAJA,OAAI,EAAJA,EAAMiI,QAAQxJ,QAAS,KACtBiG,IACAI,IACAF,EAEHxG,QAASA,IA1QQxC,WAEvB,GADA2L,EAAEhB,iBACG7B,GAAgBI,GAAcF,GAAc3J,EAGjD,IACE,MAAMgB,EAAS,CACbC,QAAS,CACP,eAAgB,mBAChBC,cAAc,UAADC,OAAYnB,EAAKH,SAG5B4N,EAAO,CAAEhE,cAAaI,YAAWF,cACjC,KAAEvI,SAAeC,EAAAA,EAAMC,KAAK,qBAAsBmM,EAAMzM,GAC9D4B,QAAQ8K,IAAItM,GACZ4H,EAAQ5H,EACV,CAAE,MAAOQ,GACPgB,QAAQ8K,IAAI9L,EACd,GAwPqB+L,GAAmB5K,UAElCK,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAAAV,SAAC,sBACE,SAEL,ECjYE,SAAS6K,IACtB,MAAM,KAAE5N,EAAI,KAAE+E,IAAS9E,EAAAA,EAAAA,MAChB8J,EAAcC,IAAmB5H,EAAAA,EAAAA,UAAS,KAC1CyL,EAAOC,IAAY1L,EAAAA,EAAAA,UAAS,KAC5BmH,EAAWC,IAAgBpH,EAAAA,EAAAA,UAAa,OAAJpC,QAAI,IAAJA,OAAI,EAAJA,EAAM0I,YAC1CqF,EAAUC,IAAe5L,EAAAA,EAAAA,WAAS,GACnCG,GAAWC,EAAAA,EAAAA,MACXyL,GAAOC,EAAAA,EAAAA,GAAmB,OAAJlO,QAAI,IAAJA,OAAI,EAAJA,EAAMsJ,UAC3BjH,EAASC,IAAcF,EAAAA,EAAAA,WAAS,GACjCrB,GAAQoJ,EAAAA,EAAAA,KAERgE,GAAazL,EAAAA,EAAAA,cAAY/B,UAC7B,GAAKX,EAAL,CAIAsC,GAAW,GACXwL,EAAS,IACT,IACE,MAAM9M,EAAS,CACbC,QAAS,CACPC,cAAc,UAADC,OAAYnB,EAAKH,UAI5B,KAAEuB,SAAeC,EAAAA,EAAMsB,IAAI,cAADxB,OAChBnB,EAAKsJ,QAAO,KAAAnI,OAAIoI,GAC9BvI,GAEF8M,EAAS1M,GACTkB,GAAW,EACb,CAAE,MAAOV,GACPgB,QAAQhB,MAAM,oCAAqCA,GACnDkM,EAAS,IACTxL,GAAW,EACb,CApBA,MAFEC,EAAS,aAsBX,GACC,CAACvC,EAAM8N,EAAUvE,KAEpBrJ,EAAAA,EAAAA,YAAU,KACHF,EAILmO,IAHE5L,EAAS,aAGC,GACX,CAAC4L,EAAY5L,EAAUvC,KAE1BE,EAAAA,EAAAA,YAAU,KACHF,GAAMuC,EAAS,cAEM5B,WACxB,MAAMqK,GAASC,EAAAA,EAAAA,GAAuB,OAAJjL,QAAI,IAAJA,OAAI,EAAJA,EAAMsJ,SACxCU,EAAgBgB,EAAO,EAGzBE,EAAmB,GAClB,CAAClL,IA2BJ,OACE6C,EAAAA,EAAAA,MAACoC,EAAAA,GAAG,CACFR,QAAQ,OACRG,QAAQ,SACR3B,gBAAgB,QAChBc,MAAM,OACNqK,UAAW,OACX1J,eAAgB,SAChBC,WAAY,SAAS5B,SAAA,EAErBK,EAAAA,EAAAA,KAAC6B,EAAAA,GAAG,CACFtD,SAAU,QACVwD,WAAY,aACZkB,OAAQ,GACRtC,MAAM,OAAMhB,UAEZK,EAAAA,EAAAA,KAACiL,EAAAA,EAAQ,OAEXxL,EAAAA,EAAAA,MAACY,EAAAA,EAAI,CACHa,UAAU,SACVmB,SAAU,QACVc,WAAY,OACZvC,EAAG,EACHyH,GAAI,GAAG1I,SAAA,CACR,YACe,OAAJ/C,QAAI,IAAJA,OAAI,EAAJA,EAAMsJ,QAAQ,IAAE2E,MAE5BpL,EAAAA,EAAAA,MAACoC,EAAAA,GAAG,CACFR,QAAS,OACTG,QAAS,SACTF,eAAgB,SAChBC,WAAY,SACZZ,MAAO,CAAEgC,KAAM,MAAOC,GAAI,OAC1B/C,gBAAgB,aAChBmD,UAAU,UACVpC,EAAE,IACFwH,QAAQ,KACR3H,GAAG,QACHyK,UAAW,SAASvL,SAAA,EAEpBF,EAAAA,EAAAA,MAACiJ,EAAAA,GAAW,CACVC,GAAG,YACHC,YAAU,EACV1H,UAAW,SACXP,MAAO,CAAEgC,KAAM,OAAQC,GAAI,OAC3BhC,EAAG,EAAEjB,SAAA,EAELK,EAAAA,EAAAA,KAAC6I,EAAAA,EAAS,CAAC3H,UAAW,SAASvB,SAAC,kBAChCK,EAAAA,EAAAA,KAACoJ,EAAAA,EAAM,CACLJ,YAAY,uBACZ3H,QAAS,OACTC,eAAgB,SAChBC,WAAY,SACZZ,MAAO,OACP8G,MAAOtB,EACP8C,SAAWC,IACT9C,EAAa8C,EAAEC,OAAO1B,OACtBsD,EAAW7B,EAAEC,OAAO1B,MAAM,EAC1B9H,SAEDgH,GACCA,EAAajF,KAAK6H,IAChBvJ,EAAAA,EAAAA,KAAA,UAEEyH,MAAO8B,EAAY9B,MACnB6B,MAAO,CAAE9F,MAAO,SAAU7D,SAEzB4J,EAAYzH,MAJRyH,EAAY9B,eAS3BhI,EAAAA,EAAAA,MAACY,EAAAA,EAAI,CAACgC,SAAU,SAAUc,WAAY,OAAQ2F,UAAW,YAAYnJ,SAAA,CAAC,sBAChDwG,MAEtB1G,EAAAA,EAAAA,MAACoC,EAAAA,GAAG,CACFR,QAAS,OACTG,QAAS,SACTF,eAAgB,SAChBC,WAAY,SACZpB,OAAQ,QACRkD,EAAG,EACHzC,EAAG,EACHF,aAAc,EACdC,MAAO,CAAEgC,KAAM,OAAQC,GAAI,OAAQjD,SAAA,CAElC,IACAV,GACCe,EAAAA,EAAAA,KAACkC,EAAAA,EAAO,KAERlC,EAAAA,EAAAA,KAAC6B,EAAAA,GAAG,CACFR,QAAS,OACTG,QAAS,SACTF,eAAgB,SAChBC,WAAY,SACZE,KAAM,QACNd,MAAO,OAAOhB,SAEb8K,GAASA,EAAMrK,OAAS,EACvBqK,EAAM/I,KAAI,CAACC,EAAMC,KACfnC,EAAAA,EAAAA,MAACG,EAAAA,EAAM,CAELe,MAAO,OACPZ,QAASA,IAAMZ,EAAS,aAADpB,OAAc4D,EAAKxD,IAAG,KAAI,IACjDkF,EAAG,EAAE1D,SAAA,CAEJiC,EAAQ,EAAE,KAAGD,EAAKG,OALdH,EAAK6F,SASd/H,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEK,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAACa,UAAW,SAASvB,UACxBK,EAAAA,EAAAA,KAACC,EAAAA,EAAK,CACJC,IAAI,0FACJS,MAAO,OAIXX,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAAC8C,WAAY,OAAOxD,SAAC,wDAG1BK,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAAAV,SAAC,wDAOX,OAAJ/C,QAAI,IAAJA,GAAAA,EAAMuO,OACLnL,EAAAA,EAAAA,KAAC6B,EAAAA,GAAG,CAACwB,EAAG,EAAE1D,SAAC,eAEXK,EAAAA,EAAAA,KAACJ,EAAAA,EAAM,CACLyB,QAAS,OACTxB,gBAAiB,UACjBa,aAAc,GACdX,QAASA,KAjKMwK,MACvB,MAAMa,EAAQ,CACZ,QACA,SACA,SACA,MACA,SACA,QACA,OACA,QACA,SAGExO,GAAQwO,EAAMC,QAAQzO,EAAK0O,OAASF,EAAMC,QAAQ,UACpDT,GAAY,GAEZjN,EAAM,CACJS,MAAO,0DACPmN,YAAa,gCACblN,OAAQ,OACRC,SAAU,IACVC,SAAU,UAEd,EA2IUgM,EAAkB,EAEpBlH,EAAG,EAAE1D,UAELK,EAAAA,EAAAA,KAACK,EAAAA,EAAI,CAAAV,SACFgC,GAAQA,EAAK6J,WACV,uBACA,uBAKXb,IAAY3K,EAAAA,EAAAA,KAAC0F,EAAgB,CAAC9G,QAASA,IAAMgM,GAAY,OAGhE,C","sources":["components/config/chatlogics.js","miscellenious/Requests.js","miscellenious/upperNav.js","Authentication/club.js","pages/Clubs.js"],"sourcesContent":["import axios from \"axios\";\nimport { useEffect, useRef } from \"react\";\nimport { io } from \"socket.io-client\";\nimport { ChatState } from \"../Context/ChatProvider\";\n\nexport const isSameSenderMargin = (messages, m, i, userId) => {\n  const isCurrentUserSender = m.sender?.$oid === userId;\n\n  if (\n    i < messages.length - 1 &&\n    messages[i + 1].sender?.$oid === m.sender?.$oid &&\n    !isCurrentUserSender\n  ) {\n    return 33;\n  } else if (\n    (i < messages.length - 1 &&\n      messages[i + 1].sender?.$oid !== m.sender?.$oid &&\n      !isCurrentUserSender) ||\n    (i === messages.length - 1 && !isCurrentUserSender)\n  ) {\n    return 0;\n  } else {\n    return \"auto\";\n  }\n};\n\nexport const isSameSender = (messages, m, i, userId) => {\n  return (\n    i < messages.length - 1 &&\n    (messages[i + 1]?.sender?._id !== m.sender?._id ||\n      messages[i + 1]?.sender?._id === undefined) &&\n    messages[i]?.sender?._id !== userId\n  );\n};\n\nexport const isLastMessage = (messages, i, userId) => {\n  const lastMessageSenderId = messages[messages.length - 1].sender?.$oid;\n  return (\n    i === messages.length - 1 &&\n    lastMessageSenderId !== userId &&\n    lastMessageSenderId\n  );\n};\n\nexport const isSameUser = (messages, m, i) => {\n  return i > 0 && messages[i - 1].sender?.$oid === m.sender?.$oid;\n};\n\nexport const getSenderName = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1].name : users[0].name;\n};\nexport const getSenderId = (loggedUser, users) => {\n  return users[0]._id === loggedUser._id ? users[1]._id : users[0]._id;\n};\n\nexport const getSenderFull = (loggedUser, user) => {\n  return user[0]._id === loggedUser._id ? user[1] : user[0];\n};\n\nexport async function getUserById(userId, token) {\n  if (!userId && !token) {\n    return;\n  }\n  try {\n    const config = {\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    };\n    const { data } = await axios.get(`/api/user/getuserid/${userId}`, config);\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\nexport function useConnectSocket(token) {\n  const socketRef = useRef(null);\n  const { user } = ChatState();\n\n  useEffect(() => {\n    if (socketRef.current) {\n      return;\n    }\n\n    const newSocket = io(\"/\", {\n      query: { token },\n    });\n\n    newSocket.on(\"connect\", () => {\n      const email = user?.email;\n\n      newSocket.emit(\"newConnection\", { email });\n    });\n\n    newSocket.on(\"disconnect\", () => {});\n\n    socketRef.current = newSocket;\n\n    return () => {\n      newSocket.disconnect();\n      socketRef.current = null;\n    };\n  }, [token, user?.email]);\n\n  return socketRef.current;\n}\nexport async function makePaymentMpesa(amount, phoneNumber, user, toast) {\n  if (!phoneNumber) {\n    return;\n  }\n  try {\n    const config = {\n      headers: {\n        \"Content-type\": \"application/json\",\n        Authorization: `Bearer ${user.token}`,\n      },\n    };\n    const { data } = await axios.post(\n      `/api/paycheck/makepaymentmpesa/${user._id}?amount=${amount}`,\n      { phoneNumber },\n      config\n    );\n\n    if (data) {\n      toast({\n        title: \"You have been prompt to finish your subscription process\",\n        status: \"info\",\n        duration: 1000,\n        position: \"bottom\",\n      });\n    }\n  } catch (error) {}\n}\nexport async function handleApprove(accountType, type, user, setUser) {\n  try {\n    const config = {\n      headers: {\n        Authorization: `Bearer ${user.token}`,\n      },\n    };\n    const { data } = await axios.put(\n      `/api/paycheck/${user._id}/${type}/${accountType}`,\n      {},\n      config\n    );\n\n    const userData = await {\n      ...user,\n      accountType: data.accountType,\n      subscription: data.subscription,\n      day: data.day,\n    };\n    localStorage.setItem(\"userInfo\", JSON.stringify(userData));\n    setUser(userData);\n  } catch (error) {\n    console.log(error);\n    throw new Error(\"Error occurred\", error);\n  }\n}\n","import {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  ModalCloseButton,\n  useDisclosure,\n  Button,\n  Image,\n  Text,\n  Flex,\n  Box,\n  Spinner,\n} from \"@chakra-ui/react\";\nimport { ChatState } from \"../components/Context/ChatProvider\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Requests = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [clubRequests, setClubRequests] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const { user } = ChatState();\n  const navigate = useNavigate();\n\n  const fetchClubRequests = useCallback(async () => {\n    if (!user) {\n      return;\n    }\n\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\n        `/api/clubs/github/something/${user._id}`,\n        config\n      );\n      setClubRequests(data);\n    } catch (error) {\n      console.error(\"Error fetching club requests:\", error);\n    }\n  }, [user]);\n\n  useEffect(() => {\n    if (user) {\n      fetchClubRequests();\n    }\n  }, [user, fetchClubRequests]);\n\n  const declineRequest = async (clubId) => {\n    if (!user || !clubId) {\n      return;\n    }\n    setLoading(true);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\n        `/api/clubs/decline/request/${clubId}/${user._id}`,\n        config\n      );\n      setClubRequests(data);\n      setLoading(false);\n    } catch (error) {\n      setLoading(false);\n      console.error(\"Error fetching club requests/decline:\", error);\n    }\n  };\n  return (\n    <>\n      <Button\n        backgroundColor={\"white\"}\n        _hover={{ backgroundColor: \"transparent\" }}\n        onClick={onOpen}\n      >\n        <Image\n          src=\"https://res.cloudinary.com/dvc7i8g1a/image/upload/v1709643622/icons8-group-48_asymxw.png\"\n          height={5}\n        />\n        {clubRequests && clubRequests.length > 0 && (\n          <Text\n            position=\"absolute\"\n            bottom=\"70%\"\n            right=\"70%\"\n            transform=\"translate(50%, 0)\"\n            bg=\"red.500\"\n            borderRadius=\"50%\"\n            width=\"2px\"\n            height=\"2px\"\n            p={1.5}\n          ></Text>\n        )}\n        <Text />\n      </Button>\n\n      <Modal isOpen={isOpen} onClose={onClose}>\n      <ModalOverlay\n      bg=\"blackAlpha.300\"\n      backdropFilter=\"blur(10px) hue-rotate(90deg)\"\n    />\n        <ModalContent>\n          <ModalHeader textAlign={\"center\"}>Clubs Requests</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody\n            display={\"flex\"}\n            justifyContent={\"center\"}\n            alignItems={\"center\"}\n            flexDir={\"column\"}\n            maxH={\"300px\"}\n          >\n            {clubRequests && clubRequests.length > 0 ? (\n              clubRequests.map((club, index) => (\n                <Box\n                  display={\"flex\"}\n                  justifyContent={\"space-between\"}\n                  alignItems={\"center\"}\n                  width={\"100%\"}\n                  key={index}\n                >\n                  <Button\n                    key={club._id}\n                    justifyContent={\"space-between\"}\n                    onClick={() => navigate(`/showclub/${club._id}`)}\n                  >\n                    {index + 1}. Club Name: {club.name}\n                  </Button>\n                  <Button\n                    background={\"#f05e56\"}\n                    onClick={() => declineRequest(club._id)}\n                  >\n                    {loading ? <Spinner size={\"small\"} /> : `Decline`}\n                  </Button>\n                </Box>\n              ))\n            ) : (\n              <>\n                <Text>All club requests have been replied to.</Text>\n              </>\n            )}\n          </ModalBody>\n\n          <ModalFooter fontSize={\"small\"} textDecor={\"underline\"}>\n            These requests were made by club coaches.\n          </ModalFooter>\n        </ModalContent>\n      </Modal>\n    </>\n  );\n};\nexport default Requests;\n","import { Button } from \"@chakra-ui/button\";\nimport { useDisclosure } from \"@chakra-ui/hooks\";\nimport { Box, Text } from \"@chakra-ui/layout\";\nimport {\n  Badge,\n  Image,\n  useBreakpointValue,\n  IconButton,\n  CloseButton,\n} from \"@chakra-ui/react\";\nimport { Menu, MenuButton, MenuItem, MenuList } from \"@chakra-ui/menu\";\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerContent,\n  DrawerHeader,\n  DrawerOverlay,\n} from \"@chakra-ui/modal\";\nimport { BellIcon } from \"@chakra-ui/icons\";\nimport { Avatar } from \"@chakra-ui/avatar\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ChatState } from \"../components/Context/ChatProvider\";\nimport Requests from \"./Requests\";\nimport React from \"react\";\n\nfunction UpperNav() {\n  const { user, notification, setNotification } = ChatState();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const navigate = useNavigate();\n\n  const logoutHandler = () => {\n    localStorage.removeItem(\"userInfo\");\n    setNotification([]);\n    navigate(\"/\");\n  };\n\n  const displayValue = useBreakpointValue({ base: \"none\", md: \"flex\" });\n\n  const textVisibility = useBreakpointValue({\n    base: \"hidden\",\n    md: \"visible\",\n  });\n\n  return (\n    <>\n      <Box\n        display={\"flex\"}\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        bg=\"white\"\n        w=\"100%\"\n        p={3}\n        paddingBottom={2}\n        boxShadow=\"2xl\"\n        zIndex={10}\n        top={0}\n        position={\"fixed\"}\n      >\n        <Text\n          textAlign={\"center\"}\n          fontSize={{ base: \"small\", md: \"medium\" }}\n          fontWeight={\"bold\"}\n          userSelect={\"none\"}\n          p={0}\n          m={0}\n          pl={3}\n        >\n          Worldsamma\n        </Text>\n        <Box display={\"flex\"} justifyContent={\"center\"} alignItems={\"center\"}>\n          <Button\n            backgroundColor={\"transparent\"}\n            display={displayValue}\n            visibility={textVisibility}\n            _hover={{ backgroundColor: \"transparent\", color: \"green.400\" }}\n            onClick={() => {\n              navigate(\"/dashboard\");\n            }}\n          >\n            My Programs\n          </Button>\n          <Button\n            variant=\"ghost\"\n            onClick={onOpen}\n            _hover={{ backgroundColor: \"transparent\", color: \"green.400\" }}\n          >\n            <Text\n              display={{ base: \"none\", md: \"flex\" }}\n              px={4}\n              userSelect={\"none\"}\n            >\n              Discover\n            </Text>\n          </Button>\n          <Requests />\n        </Box>\n\n        <div>\n          <Menu>\n            <MenuButton p={1} position=\"relative\">\n              <BellIcon fontSize=\"2xl\" p={0} m={0} />\n              {notification.length > 0 && (\n                <Badge\n                  variant=\"subtle\"\n                  position=\"absolute\"\n                  top=\"-3px\"\n                  right=\"-3px\"\n                  backgroundColor={\"red\"}\n                  zIndex={1}\n                  borderRadius={\"50%\"}\n                  color=\"white\"\n                >\n                  {notification.length}\n                </Badge>\n              )}\n            </MenuButton>\n            <MenuList pl={2}>\n              {!notification.length && \"No New Messages\"}\n              {notification.map((notif) => (\n                <MenuItem\n                  key={notif._id}\n                  onClick={() => {\n                    setNotification(notification.filter((n) => n !== notif));\n                  }}\n                >\n                  {`New Message from ${\n                    notif.sender ? notif.sender.name : \"Coach\"\n                  } ADM: ${notif.sender ? notif.sender.admission : \" \"}`}\n                </MenuItem>\n              ))}\n            </MenuList>\n          </Menu>\n          <Menu>\n            <MenuButton\n              as={Button}\n              bg=\"white\"\n              _hover={{ backgroundColor: \"transparent\" }}\n              onClick={onOpen}\n            >\n              {displayValue === \"flex\" ? (\n                <Avatar\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={user?.name}\n                  src={user?.pic}\n                />\n              ) : (\n                <IconButton\n                  backgroundColor={\"transparent\"}\n                  icon={\n                    <Image\n                      src=\"https://res.cloudinary.com/dvc7i8g1a/image/upload/v1706276791/icons8-menu-50_afv1fe.png\"\n                      height={5}\n                    />\n                  }\n                />\n              )}\n            </MenuButton>\n          </Menu>\n        </div>\n      </Box>\n\n      <Drawer placement=\"left\" onClose={onClose} isOpen={isOpen}>\n      <DrawerOverlay\n      bg=\"blackAlpha.300\"\n      backdropFilter=\"blur(10px) hue-rotate(90deg)\"\n    />\n        <DrawerContent>\n          <DrawerHeader\n            borderBottomWidth=\"1px\"\n            display={\"flex\"}\n            justifyContent={\"space-between\"}\n          >\n            Dashboard\n            <CloseButton onClick={onClose} />\n          </DrawerHeader>\n          <DrawerBody\n            display={\"flex\"}\n            flexDir={\"column\"}\n            justifyContent={\"space-between\"}\n            width={\"100%\"}\n          >\n            <Box\n              padding={3}\n              display={\"flex\"}\n              justifyContent={\"space-around\"}\n              flexDir={\"column\"}\n            >\n              <Button\n                display={\"flex\"}\n                justifyContent={\"left\"}\n                alignItems={\"center\"}\n                background={\"white\"}\n                m={1}\n                _hover={{ backgroundColor: \"transparent\", color: \"green\" }}\n                onClick={() => navigate(\"/profile\")}\n              >\n                <Avatar\n                  size=\"sm\"\n                  cursor=\"pointer\"\n                  name={user?.name}\n                  src={user?.pic}\n                />\n                <Text p={2} m={1}>\n                  Profile\n                </Text>\n              </Button>\n              <Button\n                justifyContent={\"left\"}\n                background={\"white\"}\n                _hover={{ backgroundColor: \"transparent\", color: \"green\" }}\n                onClick={() => {\n                  navigate(\"/dashboard\");\n                  onClose();\n                }}\n              >\n                My Programs\n              </Button>\n              <Button\n                justifyContent={\"start\"}\n                background={\"white\"}\n                _hover={{ backgroundColor: \"transparent\", color: \"green\" }}\n                onClick={() => {\n                  navigate(\"/clubs\");\n                  onClose();\n                }}\n              >\n                Clubs\n              </Button>\n              <Button\n                justifyContent={\"left\"}\n                background={\"white\"}\n                _hover={{ backgroundColor: \"transparent\", color: \"green\" }}\n                isDisabled={!user?.provinces}\n                onClick={() => {\n                  navigate(\"/province\");\n                  onClose();\n                }}\n              >\n                Provincial level\n              </Button>\n              <Button\n                background={\"white\"}\n                justifyContent={\"left\"}\n                _hover={{ backgroundColor: \"transparent\", color: \"green\" }}\n                onClick={() => {\n                  navigate(\"/national\");\n                  onClose();\n                }}\n              >\n                National level\n              </Button>\n              <Button\n                background={\"white\"}\n                justifyContent={\"left\"}\n                _hover={{ backgroundColor: \"transparent\", color: \"green\" }}\n              >\n                International Championship\n              </Button>\n            </Box>\n            <Button onClick={logoutHandler}>Log out</Button>\n          </DrawerBody>\n        </DrawerContent>\n      </Drawer>\n    </>\n  );\n}\n\nexport default UpperNav;\n","import {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Image,\n  Input,\n  Select,\n  Text,\n  VStack,\n  useColorModeValue,\n  useToast,\n} from \"@chakra-ui/react\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { ChatState } from \"../components/Context/ChatProvider\";\nimport { countries } from \"countries-list\";\nimport { getStatesOfCountry } from \"../assets/state\";\nimport { useNavigate } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { useConnectSocket } from \"../components/config/chatlogics\";\n\nexport const ClubRegistration = ({ onClose }) => {\n  const { user, club, setClub, setRequests, setUser } = ChatState();\n  const [name, setName] = useState(null);\n  const [selectedCountry, setSelectedCountry] = useState(user?.country);\n  const [provience, setProvience] = useState(user.provinces);\n  const [chairperson, setChairperson] = useState(\"\");\n  const [viceChair, setViceChair] = useState(\"\");\n  const [secretary, setSecretary] = useState(\"\");\n  const [subdivisions, setSubdivisions] = useState([]);\n  const [suggest, setSuggest] = useState([]);\n  const navigate = useNavigate();\n  const toast = useToast();\n\n  const socket = useConnectSocket(user?.token);\n\n  useEffect(() => {\n    if (socket) {\n      socket.on(\"sent request\", (club) => {\n        setUser((prevUser) => ({\n          ...prevUser,\n          clubRequests: [...prevUser.clubRequests, club._id],\n        }));\n\n        setRequests((prev) => ({ ...prev, club }));\n      });\n    }\n  }, [socket, setRequests, setUser]);\n\n  const countryOptions = Object.entries(countries).map(([code, country]) => ({\n    value: country.name,\n    label: country.name,\n  }));\n\n  const getUsersWithNoClub = useCallback(async () => {\n    if (!user) {\n      navigate(\"/dashboard\");\n      return;\n    }\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user?.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\n        `/api/user/${user.country}/${provience}`,\n        config\n      );\n\n      setSuggest(data);\n    } catch (error) {\n      console.error(\"Error fetching users with no clubs:\", error);\n    }\n  }, [user.token, user._id, setSuggest, provience]);\n\n  useEffect(() => {\n    if (!user) {\n      navigate(\"/dashboard\");\n      return;\n    }\n    getUsersWithNoClub();\n  }, [getUsersWithNoClub, navigate, user]);\n\n  useEffect(() => {\n    if (!user) navigate(\"/dashboard\");\n\n    const fetchSubdivisions = async () => {\n      const states = getStatesOfCountry(selectedCountry);\n      setSubdivisions(states);\n    };\n\n    fetchSubdivisions();\n  }, [user]);\n\n  const handleFormClose = () => {\n    onClose();\n  };\n\n  const requestClubRequest = useCallback(\n    async (userId, event) => {\n      if (event) {\n        event.preventDefault();\n      }\n      if (!name) {\n        toast({\n          title: \"Give your Club a name please\",\n        });\n        return;\n      }\n      if (!user) {\n        navigate(\"/dashboard\");\n        return;\n      }\n      try {\n        const config = {\n          headers: {\n            Authorization: `Bearer ${user.token}`,\n          },\n        };\n\n        const { data } = await axios.get(\n          `/api/user/${user.country}/${user.provinces}/${name}/${userId}`,\n          config\n        );\n        setClub(data);\n      } catch (error) {\n        console.error(\"Error fetching Club:\", error);\n      }\n    },\n    [user.token, user._id, setClub]\n  );\n  const handleCreateClub = async (e) => {\n    e.preventDefault();\n    if (!chairperson || !secretary || !viceChair || !user) {\n      return;\n    }\n    try {\n      const config = {\n        headers: {\n          \"Content-type\": \"application/json\",\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n      const info = { chairperson, secretary, viceChair };\n      const { data } = await axios.post(`/api/club/register`, info, config);\n      console.log(data);\n      setClub(data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  return (\n    <VStack\n      backgroundColor={\"whitesmoke\"}\n      width={\"100%\"}\n      boxShadow=\"dark-lg\"\n      p=\"6\"\n      rounded=\"md\"\n      bg=\"white\"\n    >\n      <Box\n        display={\"flex\"}\n        justifyContent={\"center\"}\n        alignItems={\"center\"}\n        fontSize={\"large\"}\n        width={\"100%\"}\n        mt={20}\n      >\n        <Button fontSize={\"x-large\"} onClick={handleFormClose} width={\"10px\"}>\n          X\n        </Button>\n        <Text fontWeight={\"bold\"} m={1}>\n          Club Form\n        </Text>\n        <Text\n          fontSize={\"sm\"}\n          fontWeight={500}\n          bg={useColorModeValue(\"green.50\", \"green.900\")}\n          p={2}\n          px={3}\n          color={\"green.500\"}\n          rounded={\"full\"}\n        >\n          Status (*{club && club.registration ? \"Registered\" : \"Not registered\"}\n          )\n        </Text>\n      </Box>\n      <Box\n        m={3}\n        p={3}\n        borderRadius={3}\n        width={{ base: \"97%\", md: \"60%\" }}\n        border={\"1px solid #c255ed\"}\n      >\n        <FormControl id=\"first-name\" isRequired>\n          <FormLabel textColor={\"#c255ed\"}>Club name</FormLabel>\n          <Input\n            placeholder=\"Enter Club Name\"\n            value={name || (club && club.name) || \"\"}\n            onChange={(e) => setName(e.target.value)}\n          />\n        </FormControl>\n        <FormControl id=\"country\" isRequired>\n          <FormLabel textColor=\"#c255ed\">Country</FormLabel>\n          <Select\n            placeholder=\"Select Club country\"\n            display={\"flex\"}\n            justifyContent={\"center\"}\n            alignItems={\"center\"}\n            width={\"100%\"}\n            value={user?.country}\n            isDisabled={true}\n            onChange={(e) => setSelectedCountry(e.target.value)}\n          >\n            {countryOptions.map((option) => (\n              <option\n                key={option.value}\n                value={option.value}\n                style={{ color: \"black\" }}\n              >\n                {option.label}\n              </option>\n            ))}\n          </Select>\n        </FormControl>\n        {selectedCountry && subdivisions ? (\n          <FormControl id=\"provinces\" isRequired>\n            <FormLabel textColor={\"#c255ed\"}>County/Province</FormLabel>\n            <Select\n              placeholder=\"Select Club province\"\n              display={\"flex\"}\n              justifyContent={\"center\"}\n              alignItems={\"center\"}\n              width={\"100%\"}\n              value={provience}\n              isDisabled={true}\n              onChange={(e) => setProvience(e.target.value)}\n            >\n              {subdivisions &&\n                subdivisions.map((subdivision) => (\n                  <option\n                    key={subdivision.value}\n                    value={subdivision.value}\n                    style={{ color: \"black\" }}\n                  >\n                    {subdivision.name}\n                  </option>\n                ))}\n            </Select>\n          </FormControl>\n        ) : (\n          <FormControl id=\"provinces\" isRequired>\n            <FormLabel textColor={\"#c255ed\"}>County/Province</FormLabel>\n            <Input\n              type=\"text\"\n              placeholder=\"Province\"\n              onChange={(e) => setProvience(e.target.value)}\n            />\n          </FormControl>\n        )}\n        <FormControl id=\"first-name\" isRequired>\n          <FormLabel textColor={\"#c255ed\"}>\n            Make requests to members around you.\n          </FormLabel>\n        </FormControl>\n        <Box\n          display={\"flex\"}\n          flexDir={\"column\"}\n          justifyContent={\"center\"}\n          alignItems={\"center\"}\n          borderRadius={3}\n          width={\"100%\"}\n          height={\"200px\"}\n          overflow=\"auto\"\n        >\n          {!suggest && (\n            <Text textAlign={\"center\"}>\n              No student without a club in this region.\n            </Text>\n          )}\n          {suggest.length > 0 &&\n            suggest.map((suggestion) => (\n              <Box\n                display={\"flex\"}\n                justifyContent={\"space-between\"}\n                alignItems={\"center\"}\n                key={suggestion._id}\n                style={{ color: \"black\" }}\n                width={\"90%\"}\n                m={1}\n              >\n                <Text fontSize={\"small\"} fontWeight={\"bold\"}>\n                  Name: {suggestion.name}, Adm: {suggestion.admission}\n                </Text>\n                <Button\n                  borderRadius={20}\n                  isDisabled={\n                    club && club.clubRequests.includes(suggestion._id)\n                  }\n                  onClick={(event) => requestClubRequest(suggestion._id, event)}\n                  backgroundColor={\"#c255ed\"}\n                >\n                  {club && club.clubRequests.includes(suggestion._id)\n                    ? \"Request sent\"\n                    : \"Send Request\"}\n                </Button>\n              </Box>\n            ))}\n        </Box>\n        <FormControl id=\"members\" isRequired>\n          <FormLabel textColor={\"#c255ed\"}>\n            Students enrolled {club && club.members.length}/20\n          </FormLabel>\n          <Box\n            display={\"flex\"}\n            justifyContent={\"center\"}\n            alignItems={\"center\"}\n            borderRadius={3}\n            width={\"100%\"}\n            height={\"100px\"}\n            overflow=\"auto\"\n            borderTop={\"1px solid #c255ed\"}\n            borderBottom={\"1px solid #c255ed\"}\n          >\n            {club && club.members.length === 0 && (\n              <Text textAlign={\"center\"}>\n                No members available for this club.\n              </Text>\n            )}\n            {club &&\n              club.members.length > 0 &&\n              club.members.map((member) => (\n                <Button fontSize={\"small\"} fontWeight={\"bold\"} m={1}>\n                  Adm: {member.admission}\n                </Button>\n              ))}\n          </Box>\n        </FormControl>\n        <FormControl id=\"chairman\" isRequired>\n          <FormLabel>Chairperson</FormLabel>\n          <Input\n            type=\"text\"\n            name=\"chairman\"\n            value={chairperson}\n            onChange={(e) => setChairperson(e.target.chairperson)}\n            placeholder=\"Input valid adm of the party\"\n            isInvalid={\n              !club?.members.some((adm) => adm.admission === chairperson)\n            }\n          />\n        </FormControl>\n        <FormControl id=\"secretary\" isRequired>\n          <FormLabel>Secretary</FormLabel>\n          <Input\n            type=\"text\"\n            name=\"secretary\"\n            value={secretary}\n            placeholder=\"Input valid adm of the party\"\n            isInvalid={\n              !club?.members.some((adm) => adm.admission === secretary)\n            }\n            onChange={(e) => setSecretary(e.target.secretary)}\n          />\n        </FormControl>\n        <FormControl id=\"vice-chairman\" isRequired>\n          <FormLabel>Vice Chairperson</FormLabel>\n          <Input\n            type=\"text\"\n            name=\"viceChairman\"\n            value={viceChair}\n            placeholder=\"Input valid adm of the party\"\n            isInvalid={\n              !club?.members.some((adm) => adm.admission === viceChair)\n            }\n            onChange={(e) => setViceChair(e.target.viceChair)}\n          />\n        </FormControl>\n        <FormControl id=\"provincial-coach\">\n          <FormLabel>Coach</FormLabel>\n          <Input\n            type=\"text\"\n            name=\"provincialCoach\"\n            value={user?.admission}\n            isDisabled={true}\n          />\n        </FormControl>\n        <Button\n          colorScheme=\"blue\"\n          width=\"100%\"\n          style={{ marginTop: 15 }}\n          isDisabled={\n            club?.members.length < 20 ||\n            !chairperson ||\n            !secretary ||\n            !viceChair\n          }\n          onClick={() => handleCreateClub()}\n        >\n          <Text> Register Club </Text>\n        </Button>{\" \"}\n      </Box>\n    </VStack>\n  );\n};\n","import React, { useCallback, useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  Box,\n  Button,\n  FormControl,\n  FormLabel,\n  Image,\n  Select,\n  Spinner,\n  Text,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { ChatState } from \"../components/Context/ChatProvider\";\nimport { getStatesOfCountry, getCountryFlag } from \"../assets/state\";\nimport UpperNav from \"../miscellenious/upperNav\";\nimport axios from \"axios\";\nimport { ClubRegistration } from \"../Authentication/club\";\n\nexport default function Clubs(){\n  const { user, club } = ChatState();\n  const [subdivisions, setSubdivisions] = useState([]);\n  const [clubs, setClubs] = useState([]);\n  const [provience, setProvience] = useState(user?.provinces);\n  const [fillForm, setFillForm] = useState(false);\n  const navigate = useNavigate();\n  const flag = getCountryFlag(user?.country);\n  const [loading, setLoading] = useState(false);\n  const toast = useToast();\n\n  const fetchClubs = useCallback(async () => {\n    if (!user) {\n      navigate(\"/dashboard\");\n      return;\n    }\n    setLoading(true);\n    setClubs([]);\n    try {\n      const config = {\n        headers: {\n          Authorization: `Bearer ${user.token}`,\n        },\n      };\n\n      const { data } = await axios.get(\n        `/api/clubs/${user.country}/${provience}`,\n        config\n      );\n      setClubs(data);\n      setLoading(false);\n    } catch (error) {\n      console.error(\"Error fetching or creating clubs:\", error);\n      setClubs([]);\n      setLoading(false);\n    }\n  }, [user, setClubs, provience]);\n\n  useEffect(() => {\n    if (!user) {\n      navigate(\"/dashboard\");\n      return;\n    }\n    fetchClubs();\n  }, [fetchClubs, navigate, user]);\n\n  useEffect(() => {\n    if (!user) navigate(\"/dashboard\");\n\n    const fetchSubdivisions = async () => {\n      const states = getStatesOfCountry(user?.country);\n      setSubdivisions(states);\n    };\n\n    fetchSubdivisions();\n  }, [user]);\n  const handleCreateClub = () => {\n    const belts = [\n      \"Guest\",\n      \"Yellow\",\n      \"Orange\",\n      \"Red\",\n      \"Purple\",\n      \"Green\",\n      \"Blue\",\n      \"Brown\",\n      \"Black\",\n    ];\n\n    if (user && belts.indexOf(user.belt) >= belts.indexOf(\"Orange\")) {\n      setFillForm(true);\n    } else {\n      toast({\n        title: \"You need to elevate your craft to at least Orange Belt!\",\n        description: \"Requirements not attained yet\",\n        status: \"info\",\n        duration: 5000,\n        position: \"bottom\",\n      });\n    }\n  };\n\n  return (\n    <Box\n      display=\"flex\"\n      flexDir=\"column\"\n      backgroundColor=\"white\"\n      width=\"100%\"\n      overflowX={\"auto\"}\n      justifyContent={\"center\"}\n      alignItems={\"center\"}\n    >\n      <Box\n        position={\"fixed\"}\n        background={\"Background\"}\n        zIndex={10}\n        width=\"100%\"\n      >\n        <UpperNav />\n      </Box>\n      <Text\n        textAlign=\"center\"\n        fontSize={\"large\"}\n        fontWeight={\"bold\"}\n        p={3}\n        mt={20}\n      >\n        Country: {user?.country} {flag}\n      </Text>\n      <Box\n        display={\"flex\"}\n        flexDir={\"column\"}\n        justifyContent={\"center\"}\n        alignItems={\"center\"}\n        width={{ base: \"97%\", md: \"70%\" }}\n        backgroundColor=\"Background\"\n        boxShadow=\"dark-lg\"\n        p=\"6\"\n        rounded=\"md\"\n        bg=\"white\"\n        fontStyle={\"italic\"}\n      >\n        <FormControl\n          id=\"provinces\"\n          isRequired\n          textAlign={\"center\"}\n          width={{ base: \"100%\", md: \"60%\" }}\n          p={3}\n        >\n          <FormLabel textAlign={\"center\"}>Select State</FormLabel>\n          <Select\n            placeholder=\"Select your province\"\n            display={\"flex\"}\n            justifyContent={\"center\"}\n            alignItems={\"center\"}\n            width={\"100%\"}\n            value={provience}\n            onChange={(e) => {\n              setProvience(e.target.value);\n              fetchClubs(e.target.value);\n            }}\n          >\n            {subdivisions &&\n              subdivisions.map((subdivision) => (\n                <option\n                  key={subdivision.value}\n                  value={subdivision.value}\n                  style={{ color: \"black\" }}\n                >\n                  {subdivision.name}\n                </option>\n              ))}\n          </Select>\n        </FormControl>\n        <Text fontSize={\"larger\"} fontWeight={\"bold\"} textColor={\"darkgreen\"}>\n          Available Clubs in {provience}\n        </Text>\n        <Box\n          display={\"flex\"}\n          flexDir={\"column\"}\n          justifyContent={\"center\"}\n          alignItems={\"center\"}\n          height={\"10rem\"}\n          m={1}\n          p={0}\n          borderRadius={3}\n          width={{ base: \"100%\", md: \"80%\" }}\n        >\n          {\" \"}\n          {loading ? (\n            <Spinner />\n          ) : (\n            <Box\n              display={\"flex\"}\n              flexDir={\"column\"}\n              justifyContent={\"center\"}\n              alignItems={\"center\"}\n              maxH={\"300px\"}\n              width={\"100%\"}\n            >\n              {clubs && clubs.length > 0 ? (\n                clubs.map((club, index) => (\n                  <Button\n                    key={club.code}\n                    width={\"100%\"}\n                    onClick={() => navigate(`/showclub/${club._id}/${false}`)}\n                    m={1}\n                  >\n                    {index + 1}. {club.name}\n                  </Button>\n                ))\n              ) : (\n                <>\n                  <Text textAlign={\"center\"}>\n                    <Image\n                      src=\"https://res.cloudinary.com/dvc7i8g1a/image/upload/v1708443842/icons8-here-80_oa8vme.png\"\n                      width={7}\n                    />\n                  </Text>\n\n                  <Text fontWeight={\"bold\"}>\n                    No clubs available in this region yet 🚫\n                  </Text>\n                  <Text>Start your own club below and lead the way!</Text>\n                </>\n              )}\n            </Box>\n          )}\n        </Box>\n\n        {user?.couch ? (\n          <Box m={2}>Your Club</Box>\n        ) : (\n          <Button\n            display={\"flex\"}\n            backgroundColor={\"#c255ed\"}\n            borderRadius={20}\n            onClick={() => {\n              handleCreateClub();\n            }}\n            m={2}\n          >\n            <Text>\n              {club && club.registered\n                ? \"Continue Registering\"\n                : \"Register Club\"}\n            </Text>\n          </Button>\n        )}\n      </Box>\n      {fillForm && <ClubRegistration onClose={() => setFillForm(false)} />}\n    </Box>\n  );\n};\n"],"names":["useConnectSocket","token","socketRef","useRef","user","ChatState","useEffect","current","newSocket","io","query","on","email","emit","disconnect","async","makePaymentMpesa","amount","phoneNumber","toast","config","headers","Authorization","concat","data","axios","post","_id","title","status","duration","position","error","Requests","isOpen","onOpen","onClose","useDisclosure","clubRequests","setClubRequests","useState","loading","setLoading","navigate","useNavigate","fetchClubRequests","useCallback","get","console","_jsxs","_Fragment","children","Button","backgroundColor","_hover","onClick","_jsx","Image","src","height","length","Text","bottom","right","transform","bg","borderRadius","width","p","Modal","ModalOverlay","backdropFilter","ModalContent","ModalHeader","textAlign","ModalCloseButton","ModalBody","display","justifyContent","alignItems","flexDir","maxH","map","club","index","Box","name","background","clubId","declineRequest","Spinner","size","ModalFooter","fontSize","textDecor","notification","setNotification","displayValue","useBreakpointValue","base","md","textVisibility","w","paddingBottom","boxShadow","zIndex","top","fontWeight","userSelect","m","pl","visibility","color","variant","px","Menu","MenuButton","BellIcon","Badge","MenuList","notif","MenuItem","filter","n","sender","admission","as","Avatar","cursor","pic","IconButton","icon","Drawer","placement","DrawerOverlay","DrawerContent","DrawerHeader","borderBottomWidth","CloseButton","DrawerBody","padding","isDisabled","provinces","logoutHandler","localStorage","removeItem","ClubRegistration","_ref","setClub","setRequests","setUser","setName","selectedCountry","setSelectedCountry","country","provience","setProvience","chairperson","setChairperson","viceChair","setViceChair","secretary","setSecretary","subdivisions","setSubdivisions","suggest","setSuggest","useToast","socket","prevUser","prev","countryOptions","Object","entries","countries","_ref2","code","value","label","getUsersWithNoClub","states","getStatesOfCountry","fetchSubdivisions","requestClubRequest","userId","event","preventDefault","VStack","rounded","mt","handleFormClose","useColorModeValue","registration","border","FormControl","id","isRequired","FormLabel","textColor","Input","placeholder","onChange","e","target","Select","option","style","subdivision","type","overflow","suggestion","includes","members","borderTop","borderBottom","member","isInvalid","some","adm","colorScheme","marginTop","info","log","handleCreateClub","Clubs","clubs","setClubs","fillForm","setFillForm","flag","getCountryFlag","fetchClubs","overflowX","UpperNav","fontStyle","couch","belts","indexOf","belt","description","registered"],"sourceRoot":""}